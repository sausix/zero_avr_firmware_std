
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a8  00800100  000010cc  00001160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002e  008001a8  008001a8  00001208  2**0
                  ALLOC
  3 .comment      00000022  00000000  00000000  00001208  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000122c  2**2
                  CONTENTS, READONLY, OCTETS
  5 .debug_aranges 00000028  00000000  00000000  0000126c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   00001a4c  00000000  00000000  00001294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00000d16  00000000  00000000  00002ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line   0000208e  00000000  00000000  000039f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_frame  000001cc  00000000  00000000  00005a84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    0000076e  00000000  00000000  00005c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00000bcc  00000000  00000000  000063be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000030  00000000  00000000  00006f8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
       4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
       8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
       c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      24:	0c 94 25 02 	jmp	0x44a	; 0x44a <__vector_9>
      28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      5c:	0c 94 3a 02 	jmp	0x474	; 0x474 <__vector_23>
      60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      90:	0c 94 4c 02 	jmp	0x498	; 0x498 <__vector_36>
      94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
      ac:	11 24       	eor	r1, r1
      ae:	1f be       	out	0x3f, r1	; 63
      b0:	cf ef       	ldi	r28, 0xFF	; 255
      b2:	da e0       	ldi	r29, 0x0A	; 10
      b4:	de bf       	out	0x3e, r29	; 62
      b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
      b8:	11 e0       	ldi	r17, 0x01	; 1
      ba:	a0 e0       	ldi	r26, 0x00	; 0
      bc:	b1 e0       	ldi	r27, 0x01	; 1
      be:	ec ec       	ldi	r30, 0xCC	; 204
      c0:	f0 e1       	ldi	r31, 0x10	; 16
      c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
      c4:	05 90       	lpm	r0, Z+
      c6:	0d 92       	st	X+, r0
      c8:	a8 3a       	cpi	r26, 0xA8	; 168
      ca:	b1 07       	cpc	r27, r17
      cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
      ce:	21 e0       	ldi	r18, 0x01	; 1
      d0:	a8 ea       	ldi	r26, 0xA8	; 168
      d2:	b1 e0       	ldi	r27, 0x01	; 1
      d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
      d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
      d8:	a6 3d       	cpi	r26, 0xD6	; 214
      da:	b2 07       	cpc	r27, r18
      dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
      de:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <main>
      e2:	0c 94 38 08 	jmp	0x1070	; 0x1070 <_exit>

000000e6 <__bad_interrupt>:
      e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <_crc8_ccitt_update>:

static __inline__ uint8_t
_crc8_ccitt_update(uint8_t __crc, uint8_t __data)
{
    uint8_t __i, __pattern;
    __asm__ __volatile__ (
      ea:	86 27       	eor	r24, r22
      ec:	68 e0       	ldi	r22, 0x08	; 8
      ee:	97 e0       	ldi	r25, 0x07	; 7
      f0:	88 0f       	add	r24, r24
      f2:	08 f4       	brcc	.+2      	; 0xf6 <_crc8_ccitt_update+0xc>
      f4:	89 27       	eor	r24, r25
      f6:	6a 95       	dec	r22
      f8:	d9 f7       	brne	.-10     	; 0xf0 <_crc8_ccitt_update+0x6>
        "2:  dec    %1" "\n\t"
        "    brne   1b" "\n\t"
        : "=r" (__crc), "=d" (__i), "=d" (__pattern)
        : "0" (__crc), "r" (__data));
    return __crc;
}
      fa:	08 95       	ret

000000fc <ws2812_sendarray_mask>:
#define w_nop4  w_nop2 w_nop2
#define w_nop8  w_nop4 w_nop4
#define w_nop16 w_nop8 w_nop8

void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
      fc:	9c 01       	movw	r18, r24
      fe:	cb 01       	movw	r24, r22
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;
  
  ws2812_DDRREG |= maskhi; // Enable output
     100:	5a b1       	in	r21, 0x0a	; 10
     102:	54 2b       	or	r21, r20
     104:	5a b9       	out	0x0a, r21	; 10
  
  masklo	=~maskhi&ws2812_PORTREG;
     106:	6b b1       	in	r22, 0x0b	; 11
     108:	54 2f       	mov	r21, r20
     10a:	50 95       	com	r21
     10c:	56 23       	and	r21, r22
  maskhi |=        ws2812_PORTREG;
     10e:	6b b1       	in	r22, 0x0b	; 11
     110:	46 2b       	or	r20, r22
  
  sreg_prev=SREG;
     112:	6f b7       	in	r22, 0x3f	; 63
  cli();  
     114:	f8 94       	cli

  while (datlen--) {
     116:	82 0f       	add	r24, r18
     118:	93 1f       	adc	r25, r19
     11a:	28 17       	cp	r18, r24
     11c:	39 07       	cpc	r19, r25
     11e:	11 f4       	brne	.+4      	; 0x124 <ws2812_sendarray_mask+0x28>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
     120:	6f bf       	out	0x3f, r22	; 63
}
     122:	08 95       	ret
    asm volatile(
     124:	f9 01       	movw	r30, r18
     126:	71 91       	ld	r23, Z+
     128:	9f 01       	movw	r18, r30
     12a:	e8 e0       	ldi	r30, 0x08	; 8

0000012c <loop88>:
     12c:	4b b9       	out	0x0b, r20	; 11
     12e:	00 00       	nop
     130:	00 c0       	rjmp	.+0      	; 0x132 <loop88+0x6>
     132:	77 ff       	sbrs	r23, 7
     134:	5b b9       	out	0x0b, r21	; 11
     136:	77 0f       	add	r23, r23
     138:	00 00       	nop
     13a:	00 c0       	rjmp	.+0      	; 0x13c <loop88+0x10>
     13c:	00 c0       	rjmp	.+0      	; 0x13e <loop88+0x12>
     13e:	00 c0       	rjmp	.+0      	; 0x140 <loop88+0x14>
     140:	5b b9       	out	0x0b, r21	; 11
     142:	00 c0       	rjmp	.+0      	; 0x144 <loop88+0x18>
     144:	00 c0       	rjmp	.+0      	; 0x146 <loop88+0x1a>
     146:	00 c0       	rjmp	.+0      	; 0x148 <loop88+0x1c>
     148:	00 c0       	rjmp	.+0      	; 0x14a <loop88+0x1e>
     14a:	00 c0       	rjmp	.+0      	; 0x14c <loop88+0x20>
     14c:	00 c0       	rjmp	.+0      	; 0x14e <loop88+0x22>
     14e:	00 c0       	rjmp	.+0      	; 0x150 <loop88+0x24>
     150:	00 c0       	rjmp	.+0      	; 0x152 <loop88+0x26>
     152:	ea 95       	dec	r30
     154:	59 f7       	brne	.-42     	; 0x12c <loop88>
     156:	e1 cf       	rjmp	.-62     	; 0x11a <ws2812_sendarray_mask+0x1e>

00000158 <ws2812_setleds_pin>:
  ws2812_sendarray_mask((uint8_t*)ledarray,leds+leds+leds,pinmask);
     158:	9b 01       	movw	r18, r22
     15a:	22 0f       	add	r18, r18
     15c:	33 1f       	adc	r19, r19
     15e:	62 0f       	add	r22, r18
     160:	73 1f       	adc	r23, r19
     162:	0e 94 7e 00 	call	0xfc	; 0xfc <ws2812_sendarray_mask>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     166:	8f ea       	ldi	r24, 0xAF	; 175
     168:	94 e0       	ldi	r25, 0x04	; 4
     16a:	01 97       	sbiw	r24, 0x01	; 1
     16c:	f1 f7       	brne	.-4      	; 0x16a <ws2812_setleds_pin+0x12>
     16e:	00 c0       	rjmp	.+0      	; 0x170 <ws2812_setleds_pin+0x18>
     170:	00 00       	nop
}
     172:	08 95       	ret

00000174 <ws2812_setleds>:
   ws2812_setleds_pin(ledarray,leds, _BV(ws2812_pin));
     174:	40 e2       	ldi	r20, 0x20	; 32
     176:	0c 94 ac 00 	jmp	0x158	; 0x158 <ws2812_setleds_pin>

0000017a <ws2812_sendarray>:
  ws2812_sendarray_mask(data,datlen,_BV(ws2812_pin));
     17a:	40 e2       	ldi	r20, 0x20	; 32
     17c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <ws2812_sendarray_mask>

00000180 <writebl>:
                       0x0108,0x0113,0x0114,0x012F,0x0129,0x0124,0x00E1,0x0100,0x0104,0x0108,0x010B,0x010C,0x0111,
                       0x010D,0x010E,0x0100,0x0104,0x0108,0x0113,0x0114,0x012F,0x0129,0x0124,0x0026,0x0108,0x00FD,
                       0x0100,0x0108,0x0029};             


void writebl(uint8_t data) { // set single wire brightness  AL3050 
     180:	27 e0       	ldi	r18, 0x07	; 7
     182:	30 e0       	ldi	r19, 0x00	; 0
  uint8_t count = 8;
  do {
    PORTD &= ~_BV(PD4);
    _delay_us(100);
    if (!(data & (1 << (count - 1)))) {
     184:	90 e0       	ldi	r25, 0x00	; 0
    PORTD &= ~_BV(PD4);
     186:	5c 98       	cbi	0x0b, 4	; 11
     188:	ef e8       	ldi	r30, 0x8F	; 143
     18a:	f1 e0       	ldi	r31, 0x01	; 1
     18c:	31 97       	sbiw	r30, 0x01	; 1
     18e:	f1 f7       	brne	.-4      	; 0x18c <writebl+0xc>
     190:	00 c0       	rjmp	.+0      	; 0x192 <writebl+0x12>
     192:	00 00       	nop
    if (!(data & (1 << (count - 1)))) {
     194:	ac 01       	movw	r20, r24
     196:	02 2e       	mov	r0, r18
     198:	02 c0       	rjmp	.+4      	; 0x19e <writebl+0x1e>
     19a:	55 95       	asr	r21
     19c:	47 95       	ror	r20
     19e:	0a 94       	dec	r0
     1a0:	e2 f7       	brpl	.-8      	; 0x19a <writebl+0x1a>
     1a2:	ba 01       	movw	r22, r20
     1a4:	61 70       	andi	r22, 0x01	; 1
     1a6:	77 27       	eor	r23, r23
     1a8:	40 fd       	sbrc	r20, 0
     1aa:	06 c0       	rjmp	.+12     	; 0x1b8 <writebl+0x38>
     1ac:	ef e8       	ldi	r30, 0x8F	; 143
     1ae:	f1 e0       	ldi	r31, 0x01	; 1
     1b0:	31 97       	sbiw	r30, 0x01	; 1
     1b2:	f1 f7       	brne	.-4      	; 0x1b0 <writebl+0x30>
     1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <writebl+0x36>
     1b6:	00 00       	nop
      _delay_us(100);
    }
    PORTD |= _BV(PD4);
     1b8:	5c 9a       	sbi	0x0b, 4	; 11
     1ba:	ef e8       	ldi	r30, 0x8F	; 143
     1bc:	f1 e0       	ldi	r31, 0x01	; 1
     1be:	31 97       	sbiw	r30, 0x01	; 1
     1c0:	f1 f7       	brne	.-4      	; 0x1be <writebl+0x3e>
     1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <writebl+0x44>
     1c4:	00 00       	nop
    _delay_us(100);
    if ((data & (1 << (count - 1))) != 0) {
     1c6:	67 2b       	or	r22, r23
     1c8:	31 f0       	breq	.+12     	; 0x1d6 <writebl+0x56>
     1ca:	ef e8       	ldi	r30, 0x8F	; 143
     1cc:	f1 e0       	ldi	r31, 0x01	; 1
     1ce:	31 97       	sbiw	r30, 0x01	; 1
     1d0:	f1 f7       	brne	.-4      	; 0x1ce <writebl+0x4e>
     1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <writebl+0x54>
     1d4:	00 00       	nop
      _delay_us(100);
    }
    count--;
  } while (count);
     1d6:	21 50       	subi	r18, 0x01	; 1
     1d8:	31 09       	sbc	r19, r1
     1da:	a8 f6       	brcc	.-86     	; 0x186 <writebl+0x6>

  PORTD &= ~_BV(PD4);
     1dc:	5c 98       	cbi	0x0b, 4	; 11
     1de:	8f e8       	ldi	r24, 0x8F	; 143
     1e0:	91 e0       	ldi	r25, 0x01	; 1
     1e2:	01 97       	sbiw	r24, 0x01	; 1
     1e4:	f1 f7       	brne	.-4      	; 0x1e2 <writebl+0x62>
     1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <writebl+0x68>
     1e8:	00 00       	nop
  _delay_us(100);
  PORTD |= _BV(PD4);
     1ea:	5c 9a       	sbi	0x0b, 4	; 11
     1ec:	ef e8       	ldi	r30, 0x8F	; 143
     1ee:	f1 e0       	ldi	r31, 0x01	; 1
     1f0:	31 97       	sbiw	r30, 0x01	; 1
     1f2:	f1 f7       	brne	.-4      	; 0x1f0 <writebl+0x70>
     1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <writebl+0x76>
     1f6:	00 00       	nop
  _delay_us(100);
}
     1f8:	08 95       	ret

000001fa <initbl>:

void initbl(void) { // init AL3050 single wire dimming
  PORTD &= ~_BV(PD4);
     1fa:	5c 98       	cbi	0x0b, 4	; 11
     1fc:	8f ed       	ldi	r24, 0xDF	; 223
     1fe:	9e e2       	ldi	r25, 0x2E	; 46
     200:	01 97       	sbiw	r24, 0x01	; 1
     202:	f1 f7       	brne	.-4      	; 0x200 <initbl+0x6>
     204:	00 c0       	rjmp	.+0      	; 0x206 <initbl+0xc>
     206:	00 00       	nop
  _delay_us(3000);
  PORTD |= _BV(PD4);
     208:	5c 9a       	sbi	0x0b, 4	; 11
     20a:	8f ed       	ldi	r24, 0xDF	; 223
     20c:	91 e0       	ldi	r25, 0x01	; 1
     20e:	01 97       	sbiw	r24, 0x01	; 1
     210:	f1 f7       	brne	.-4      	; 0x20e <initbl+0x14>
     212:	00 c0       	rjmp	.+0      	; 0x214 <initbl+0x1a>
     214:	00 00       	nop
  _delay_us(120);
  PORTD &= ~_BV(PD4);
     216:	5c 98       	cbi	0x0b, 4	; 11
     218:	8f ec       	ldi	r24, 0xCF	; 207
     21a:	97 e0       	ldi	r25, 0x07	; 7
     21c:	01 97       	sbiw	r24, 0x01	; 1
     21e:	f1 f7       	brne	.-4      	; 0x21c <initbl+0x22>
     220:	00 c0       	rjmp	.+0      	; 0x222 <initbl+0x28>
     222:	00 00       	nop
  _delay_us(500);
  PORTD |= _BV(PD4);
     224:	5c 9a       	sbi	0x0b, 4	; 11
     226:	9a e1       	ldi	r25, 0x1A	; 26
     228:	9a 95       	dec	r25
     22a:	f1 f7       	brne	.-4      	; 0x228 <initbl+0x2e>
     22c:	00 c0       	rjmp	.+0      	; 0x22e <initbl+0x34>
  _delay_us(5);
}
     22e:	08 95       	ret

00000230 <write>:

void write(uint16_t data, uint8_t count) { //  write routine for LCD setup
     230:	9c 01       	movw	r18, r24
  PORTD &= ~_BV(PD4);
     232:	5c 98       	cbi	0x0b, 4	; 11
  do {
    PORTB &= ~_BV(PB2);
    PORTB |= (((data & (1 << (count - 1))) != 0) << 2); // BITWISE AND -> PB2           
     234:	e1 e0       	ldi	r30, 0x01	; 1
     236:	f0 e0       	ldi	r31, 0x00	; 0
    PORTB &= ~_BV(PB2);
     238:	2a 98       	cbi	0x05, 2	; 5
    PORTB |= (((data & (1 << (count - 1))) != 0) << 2); // BITWISE AND -> PB2           
     23a:	85 b1       	in	r24, 0x05	; 5
     23c:	a6 2f       	mov	r26, r22
     23e:	a1 50       	subi	r26, 0x01	; 1
     240:	bb 0b       	sbc	r27, r27
     242:	ad 01       	movw	r20, r26
     244:	df 01       	movw	r26, r30
     246:	02 c0       	rjmp	.+4      	; 0x24c <write+0x1c>
     248:	aa 0f       	add	r26, r26
     24a:	bb 1f       	adc	r27, r27
     24c:	4a 95       	dec	r20
     24e:	e2 f7       	brpl	.-8      	; 0x248 <write+0x18>
     250:	ad 01       	movw	r20, r26
     252:	42 23       	and	r20, r18
     254:	53 23       	and	r21, r19
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	45 2b       	or	r20, r21
     25a:	09 f0       	breq	.+2      	; 0x25e <write+0x2e>
     25c:	94 e0       	ldi	r25, 0x04	; 4
     25e:	89 2b       	or	r24, r25
     260:	85 b9       	out	0x05, r24	; 5
    PORTB &= ~_BV(PB1);
     262:	29 98       	cbi	0x05, 1	; 5
     264:	8f e8       	ldi	r24, 0x8F	; 143
     266:	91 e0       	ldi	r25, 0x01	; 1
     268:	01 97       	sbiw	r24, 0x01	; 1
     26a:	f1 f7       	brne	.-4      	; 0x268 <write+0x38>
     26c:	00 c0       	rjmp	.+0      	; 0x26e <write+0x3e>
     26e:	00 00       	nop
    _delay_us(DELAY);
    PORTB |= _BV(PB1);
     270:	29 9a       	sbi	0x05, 1	; 5
     272:	af e8       	ldi	r26, 0x8F	; 143
     274:	b1 e0       	ldi	r27, 0x01	; 1
     276:	11 97       	sbiw	r26, 0x01	; 1
     278:	f1 f7       	brne	.-4      	; 0x276 <write+0x46>
     27a:	00 c0       	rjmp	.+0      	; 0x27c <write+0x4c>
     27c:	00 00       	nop
    _delay_us(DELAY);
    count--;
     27e:	61 50       	subi	r22, 0x01	; 1
  } while (count);
     280:	d9 f6       	brne	.-74     	; 0x238 <write+0x8>
  PORTB &= ~_BV(PB2);
     282:	2a 98       	cbi	0x05, 2	; 5
  PORTD |= _BV(PD4);
     284:	5c 9a       	sbi	0x0b, 4	; 11
}
     286:	08 95       	ret

00000288 <setup_lcd>:

void setup_lcd(void) {
     288:	cf 93       	push	r28
     28a:	df 93       	push	r29
  for (int x = 0; x < 11; x++) {
     28c:	c8 e8       	ldi	r28, 0x88	; 136
     28e:	d1 e0       	ldi	r29, 0x01	; 1
    write(commands[x], 16);
     290:	60 e1       	ldi	r22, 0x10	; 16
     292:	89 91       	ld	r24, Y+
     294:	99 91       	ld	r25, Y+
     296:	0e 94 18 01 	call	0x230	; 0x230 <write>
  for (int x = 0; x < 11; x++) {
     29a:	21 e0       	ldi	r18, 0x01	; 1
     29c:	ce 39       	cpi	r28, 0x9E	; 158
     29e:	d2 07       	cpc	r29, r18
     2a0:	b9 f7       	brne	.-18     	; 0x290 <setup_lcd+0x8>
     2a2:	c0 e0       	ldi	r28, 0x00	; 0
     2a4:	d1 e0       	ldi	r29, 0x01	; 1
  } //only for A035VW01
  for (int x = 0; x < (sizeof(commands2) / sizeof(uint16_t)); x++) {
    if (commands2[x] == 0x0000) {
     2a6:	89 91       	ld	r24, Y+
     2a8:	99 91       	ld	r25, Y+
     2aa:	00 97       	sbiw	r24, 0x00	; 0
     2ac:	81 f4       	brne	.+32     	; 0x2ce <setup_lcd+0x46>
	__builtin_avr_delay_cycles(__ticks_dc);
     2ae:	8f ef       	ldi	r24, 0xFF	; 255
     2b0:	9b ed       	ldi	r25, 0xDB	; 219
     2b2:	25 e0       	ldi	r18, 0x05	; 5
     2b4:	81 50       	subi	r24, 0x01	; 1
     2b6:	90 40       	sbci	r25, 0x00	; 0
     2b8:	20 40       	sbci	r18, 0x00	; 0
     2ba:	e1 f7       	brne	.-8      	; 0x2b4 <setup_lcd+0x2c>
     2bc:	00 c0       	rjmp	.+0      	; 0x2be <setup_lcd+0x36>
     2be:	00 00       	nop
  for (int x = 0; x < (sizeof(commands2) / sizeof(uint16_t)); x++) {
     2c0:	81 e0       	ldi	r24, 0x01	; 1
     2c2:	c8 38       	cpi	r28, 0x88	; 136
     2c4:	d8 07       	cpc	r29, r24
     2c6:	79 f7       	brne	.-34     	; 0x2a6 <setup_lcd+0x1e>
      continue;
    }
    write(commands2[x], 9);
  } //only for A035VL01

}
     2c8:	df 91       	pop	r29
     2ca:	cf 91       	pop	r28
     2cc:	08 95       	ret
    write(commands2[x], 9);
     2ce:	69 e0       	ldi	r22, 0x09	; 9
     2d0:	0e 94 18 01 	call	0x230	; 0x230 <write>
     2d4:	f5 cf       	rjmp	.-22     	; 0x2c0 <setup_lcd+0x38>

000002d6 <readAna>:

uint16_t readAna(uint8_t channel) {
  uint8_t low, high;
  ADCSRA |= _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0);
     2d6:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     2da:	97 60       	ori	r25, 0x07	; 7
     2dc:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  ADCSRB = 0x40;
     2e0:	90 e4       	ldi	r25, 0x40	; 64
     2e2:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
  ADMUX = ((0 << REFS1) | (1 << REFS0) | (0 << ADLAR));
     2e6:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

  if (channel >= 8) //
     2ea:	88 30       	cpi	r24, 0x08	; 8
     2ec:	28 f1       	brcs	.+74     	; 0x338 <readAna+0x62>
  {
    channel -= 0x08; // ch - 8
     2ee:	88 50       	subi	r24, 0x08	; 8
    ADCSRB |= (1 << MUX5); // set MUX5 on ADCSRB to read upper bit ADC8-ADC13
     2f0:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
     2f4:	90 62       	ori	r25, 0x20	; 32
  } else {
    ADCSRB &= ~(1 << MUX5); // clear MUX 5 
     2f6:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
  }
  channel &= 0x07;
  ADMUX |= channel; // selecting channel
     2fa:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  channel &= 0x07;
     2fe:	87 70       	andi	r24, 0x07	; 7
  ADMUX |= channel; // selecting channel
     300:	89 2b       	or	r24, r25
     302:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

  ADCSRA |= _BV(ADEN);
     306:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     30a:	80 68       	ori	r24, 0x80	; 128
     30c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     310:	8f e3       	ldi	r24, 0x3F	; 63
     312:	9f e1       	ldi	r25, 0x1F	; 31
     314:	01 97       	sbiw	r24, 0x01	; 1
     316:	f1 f7       	brne	.-4      	; 0x314 <readAna+0x3e>
     318:	00 c0       	rjmp	.+0      	; 0x31a <readAna+0x44>
     31a:	00 00       	nop
  _delay_ms(2);
  ADCSRA |= (1 << ADSC);
     31c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     320:	80 64       	ori	r24, 0x40	; 64
     322:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

  while ((ADCSRA & _BV(ADSC))); // measuring 
     326:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     32a:	86 fd       	sbrc	r24, 6
     32c:	fc cf       	rjmp	.-8      	; 0x326 <readAna+0x50>
  low = ADCL;
     32e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  high = ADCH;
     332:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  return (high << 8) | low;
}
     336:	08 95       	ret
    ADCSRB &= ~(1 << MUX5); // clear MUX 5 
     338:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
     33c:	9f 7d       	andi	r25, 0xDF	; 223
     33e:	db cf       	rjmp	.-74     	; 0x2f6 <readAna+0x20>

00000340 <readVcc>:

uint16_t readVcc(void) {
  ADMUX = _BV(REFS0) | _BV(MUX4) | _BV(MUX3) | _BV(MUX2) | _BV(MUX1);
     340:	8e e5       	ldi	r24, 0x5E	; 94
     342:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  ADCSRA |= _BV(ADEN);
     346:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     34a:	80 68       	ori	r24, 0x80	; 128
     34c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  ADCSRB &= ~_BV(MUX5);
     350:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
     354:	8f 7d       	andi	r24, 0xDF	; 223
     356:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
     35a:	8f e3       	ldi	r24, 0x3F	; 63
     35c:	9f e1       	ldi	r25, 0x1F	; 31
     35e:	01 97       	sbiw	r24, 0x01	; 1
     360:	f1 f7       	brne	.-4      	; 0x35e <readVcc+0x1e>
     362:	00 c0       	rjmp	.+0      	; 0x364 <readVcc+0x24>
     364:	00 00       	nop
  _delay_ms(2);
  ADCSRA |= 1 << ADSC;
     366:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     36a:	80 64       	ori	r24, 0x40	; 64
     36c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  while ((ADCSRA & _BV(ADSC))); // measuring
     370:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     374:	86 fd       	sbrc	r24, 6
     376:	fc cf       	rjmp	.-8      	; 0x370 <readVcc+0x30>
  ADCSRA |= 1 << ADSC;
     378:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     37c:	80 64       	ori	r24, 0x40	; 64
     37e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  while ((ADCSRA & _BV(ADSC)));
     382:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     386:	86 fd       	sbrc	r24, 6
     388:	fc cf       	rjmp	.-8      	; 0x382 <readVcc+0x42>
  return 1125300L / (ADCL | (ADCH<<8));
     38a:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     38e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     392:	38 2f       	mov	r19, r24
     394:	03 2e       	mov	r0, r19
     396:	00 0c       	add	r0, r0
     398:	44 0b       	sbc	r20, r20
     39a:	55 0b       	sbc	r21, r21
     39c:	64 eb       	ldi	r22, 0xB4	; 180
     39e:	7b e2       	ldi	r23, 0x2B	; 43
     3a0:	81 e1       	ldi	r24, 0x11	; 17
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	0e 94 c7 06 	call	0xd8e	; 0xd8e <__divmodsi4>
}
     3a8:	c9 01       	movw	r24, r18
     3aa:	08 95       	ret

000003ac <GetTemp>:

uint16_t GetTemp(void) {
  ADMUX = _BV(REFS1) | _BV(REFS0) | 7; // Set internal V reference, temperature reading
     3ac:	87 ec       	ldi	r24, 0xC7	; 199
     3ae:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  ADCSRB = 0x20; // ref  24.6
     3b2:	80 e2       	ldi	r24, 0x20	; 32
     3b4:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
  ADCSRA &= ~(_BV(ADATE) | _BV(ADIE)); // Clear auto trigger and interrupt enable
     3b8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     3bc:	87 7d       	andi	r24, 0xD7	; 215
     3be:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  ADCSRA |= _BV(ADEN); // enable the ADC
     3c2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     3c6:	80 68       	ori	r24, 0x80	; 128
     3c8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     3cc:	8f e3       	ldi	r24, 0x3F	; 63
     3ce:	9f e1       	ldi	r25, 0x1F	; 31
     3d0:	01 97       	sbiw	r24, 0x01	; 1
     3d2:	f1 f7       	brne	.-4      	; 0x3d0 <GetTemp+0x24>
     3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <GetTemp+0x2a>
     3d6:	00 00       	nop
  _delay_ms(2); // delay for voltages to become stable.

  ADCSRA |= _BV(ADSC); // measuring
     3d8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     3dc:	80 64       	ori	r24, 0x40	; 64
     3de:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  while ((ADCSRA & _BV(ADSC)));
     3e2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     3e6:	86 fd       	sbrc	r24, 6
     3e8:	fc cf       	rjmp	.-8      	; 0x3e2 <GetTemp+0x36>

  ADCSRA |= _BV(ADSC);
     3ea:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     3ee:	80 64       	ori	r24, 0x40	; 64
     3f0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  while ((ADCSRA & _BV(ADSC)));
     3f4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     3f8:	86 fd       	sbrc	r24, 6
     3fa:	fc cf       	rjmp	.-8      	; 0x3f4 <GetTemp+0x48>

  return (ADCL | (ADCH << 8));
     3fc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     400:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
     404:	08 95       	ret

00000406 <freeRam>:

uint16_t freeRam(void) {
     406:	cf 93       	push	r28
     408:	df 93       	push	r29
     40a:	00 d0       	rcall	.+0      	; 0x40c <freeRam+0x6>
     40c:	cd b7       	in	r28, 0x3d	; 61
     40e:	de b7       	in	r29, 0x3e	; 62
  extern char __heap_start, * __brkval;
  int v;
  return (uint16_t) & v - (__brkval == 0 ? (int) & __heap_start : (int) __brkval);
     410:	20 91 d2 01 	lds	r18, 0x01D2	; 0x8001d2 <__brkval>
     414:	30 91 d3 01 	lds	r19, 0x01D3	; 0x8001d3 <__brkval+0x1>
     418:	21 15       	cp	r18, r1
     41a:	31 05       	cpc	r19, r1
     41c:	11 f4       	brne	.+4      	; 0x422 <freeRam+0x1c>
     41e:	26 ed       	ldi	r18, 0xD6	; 214
     420:	31 e0       	ldi	r19, 0x01	; 1
}
     422:	ce 01       	movw	r24, r28
     424:	01 96       	adiw	r24, 0x01	; 1
     426:	82 1b       	sub	r24, r18
     428:	93 0b       	sbc	r25, r19
     42a:	0f 90       	pop	r0
     42c:	0f 90       	pop	r0
     42e:	df 91       	pop	r29
     430:	cf 91       	pop	r28
     432:	08 95       	ret

00000434 <I2C_init>:


void I2C_init(uint8_t address) // setup ATmega as I2C slave
{
  cli();
     434:	f8 94       	cli

  TWAR = (address << 1); // Slave address without general call.
     436:	88 0f       	add	r24, r24
     438:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
  TWCR = (1 << TWEN) | // TWI Interface enabled.
     43c:	85 ec       	ldi	r24, 0xC5	; 197
     43e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    (1 << TWIE) | (1 << TWINT) | // Enable TWI interrupt and clear the flag.
    (1 << TWEA) | (0 << TWSTA) | (0 << TWSTO) | // Prepare to ACK next time the Slave is addressed.
    (0 << TWWC);

  buffer_address = 0xFF;
     442:	8f ef       	ldi	r24, 0xFF	; 255
     444:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <buffer_address>

}
     448:	08 95       	ret

0000044a <__vector_9>:

ISR(PCINT0_vect) {
     44a:	8f 93       	push	r24
     44c:	8f b7       	in	r24, 0x3f	; 63
     44e:	8f 93       	push	r24
     450:	9f 93       	push	r25
  sei();
     452:	78 94       	sei
  if (bit_is_clear(PINB, PB0)) fanspin++;
     454:	18 99       	sbic	0x03, 0	; 3
     456:	09 c0       	rjmp	.+18     	; 0x46a <__vector_9+0x20>
     458:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <fanspin>
     45c:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <fanspin+0x1>
     460:	01 96       	adiw	r24, 0x01	; 1
     462:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <fanspin+0x1>
     466:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <fanspin>
} // counting VENT_RPM
     46a:	9f 91       	pop	r25
     46c:	8f 91       	pop	r24
     46e:	8f bf       	out	0x3f, r24	; 63
     470:	8f 91       	pop	r24
     472:	18 95       	reti

00000474 <__vector_23>:

ISR(TIMER0_OVF_vect) {
     474:	8f 93       	push	r24
     476:	8f b7       	in	r24, 0x3f	; 63
     478:	8f 93       	push	r24
     47a:	9f 93       	push	r25
  isrtimer++;
     47c:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <isrtimer>
     480:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <isrtimer+0x1>
     484:	01 96       	adiw	r24, 0x01	; 1
     486:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <isrtimer+0x1>
     48a:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <isrtimer>
} // reuse timer0 for counting VENT_RPM
     48e:	9f 91       	pop	r25
     490:	8f 91       	pop	r24
     492:	8f bf       	out	0x3f, r24	; 63
     494:	8f 91       	pop	r24
     496:	18 95       	reti

00000498 <__vector_36>:

ISR(TWI_vect) {
     498:	1f 92       	push	r1
     49a:	0f 92       	push	r0
     49c:	0f b6       	in	r0, 0x3f	; 63
     49e:	0f 92       	push	r0
     4a0:	11 24       	eor	r1, r1
     4a2:	2f 93       	push	r18
     4a4:	3f 93       	push	r19
     4a6:	4f 93       	push	r20
     4a8:	5f 93       	push	r21
     4aa:	6f 93       	push	r22
     4ac:	7f 93       	push	r23
     4ae:	8f 93       	push	r24
     4b0:	9f 93       	push	r25
     4b2:	af 93       	push	r26
     4b4:	bf 93       	push	r27
     4b6:	ef 93       	push	r30
     4b8:	ff 93       	push	r31

  switch (TW_STATUS) {
     4ba:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     4be:	98 2f       	mov	r25, r24
     4c0:	98 7f       	andi	r25, 0xF8	; 248
     4c2:	90 38       	cpi	r25, 0x80	; 128
     4c4:	a9 f1       	breq	.+106    	; 0x530 <__vector_36+0x98>
     4c6:	38 f4       	brcc	.+14     	; 0x4d6 <__vector_36+0x3e>
     4c8:	99 23       	and	r25, r25
     4ca:	09 f4       	brne	.+2      	; 0x4ce <__vector_36+0x36>
     4cc:	a9 c1       	rjmp	.+850    	; 0x820 <__vector_36+0x388>
     4ce:	90 36       	cpi	r25, 0x60	; 96
     4d0:	c1 f0       	breq	.+48     	; 0x502 <__vector_36+0x6a>


    //case TW_SR_STOP:  TWCR |= (1<<TWINT)|(1<<TWEA)|(1<<TWEN);  break;

    default:         
      TWCR = (1<<TWEN)|(1<<TWIE)|(1<<TWINT)| (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|  (0<<TWWC);   
     4d2:	85 ec       	ldi	r24, 0xC5	; 197
     4d4:	a6 c1       	rjmp	.+844    	; 0x822 <__vector_36+0x38a>
  switch (TW_STATUS) {
     4d6:	88 7e       	andi	r24, 0xE8	; 232
     4d8:	88 3a       	cpi	r24, 0xA8	; 168
     4da:	d9 f7       	brne	.-10     	; 0x4d2 <__vector_36+0x3a>
	__builtin_avr_delay_cycles(__ticks_dc);
     4dc:	00 c0       	rjmp	.+0      	; 0x4de <__vector_36+0x46>
     4de:	00 c0       	rjmp	.+0      	; 0x4e0 <__vector_36+0x48>
     4e0:	00 00       	nop
	     switch(commandbyte)  {		 
     4e2:	e0 91 a1 01 	lds	r30, 0x01A1	; 0x8001a1 <commandbyte>
     4e6:	e5 31       	cpi	r30, 0x15	; 21
     4e8:	08 f0       	brcs	.+2      	; 0x4ec <__vector_36+0x54>
     4ea:	1c c1       	rjmp	.+568    	; 0x724 <__vector_36+0x28c>
     4ec:	e7 50       	subi	r30, 0x07	; 7
     4ee:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <buffer_address>
     4f2:	ed 30       	cpi	r30, 0x0D	; 13
     4f4:	08 f0       	brcs	.+2      	; 0x4f8 <__vector_36+0x60>
     4f6:	29 c1       	rjmp	.+594    	; 0x74a <__vector_36+0x2b2>
     4f8:	f0 e0       	ldi	r31, 0x00	; 0
     4fa:	e6 5c       	subi	r30, 0xC6	; 198
     4fc:	f7 4f       	sbci	r31, 0xF7	; 247
     4fe:	0c 94 e6 06 	jmp	0xdcc	; 0xdcc <__tablejump2__>
    TWCR = (1 << TWIE) | (1 << TWINT) | (1 << TWEA) | (1 << TWEN);
     502:	85 ec       	ldi	r24, 0xC5	; 197
     504:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    buffer_address = 0xFF; // set buffer pos undefined
     508:	8f ef       	ldi	r24, 0xFF	; 255
     50a:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <buffer_address>
      
  }



}
     50e:	ff 91       	pop	r31
     510:	ef 91       	pop	r30
     512:	bf 91       	pop	r27
     514:	af 91       	pop	r26
     516:	9f 91       	pop	r25
     518:	8f 91       	pop	r24
     51a:	7f 91       	pop	r23
     51c:	6f 91       	pop	r22
     51e:	5f 91       	pop	r21
     520:	4f 91       	pop	r20
     522:	3f 91       	pop	r19
     524:	2f 91       	pop	r18
     526:	0f 90       	pop	r0
     528:	0f be       	out	0x3f, r0	; 63
     52a:	0f 90       	pop	r0
     52c:	1f 90       	pop	r1
     52e:	18 95       	reti
    if (buffer_address == 0xFF) {
     530:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <buffer_address>
     534:	9f 3f       	cpi	r25, 0xFF	; 255
     536:	09 f0       	breq	.+2      	; 0x53a <__vector_36+0xa2>
     538:	64 c0       	rjmp	.+200    	; 0x602 <__vector_36+0x16a>
      commandbyte = TWDR;
     53a:	60 91 bb 00 	lds	r22, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     53e:	60 93 a1 01 	sts	0x01A1, r22	; 0x8001a1 <commandbyte>
      crc = _crc8_ccitt_update(0, commandbyte);
     542:	80 e0       	ldi	r24, 0x00	; 0
     544:	0e 94 75 00 	call	0xea	; 0xea <_crc8_ccitt_update>
     548:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <crc>
      buffer_address = 0;
     54c:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <buffer_address>
      i2cerror = 0;
     550:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <i2cerror>
      switch (commandbyte) {		 
     554:	e0 91 a1 01 	lds	r30, 0x01A1	; 0x8001a1 <commandbyte>
     558:	e5 31       	cpi	r30, 0x15	; 21
     55a:	68 f4       	brcc	.+26     	; 0x576 <__vector_36+0xde>
     55c:	f0 e0       	ldi	r31, 0x00	; 0
     55e:	e9 5b       	subi	r30, 0xB9	; 185
     560:	f7 4f       	sbci	r31, 0xF7	; 247
     562:	0c 94 e6 06 	jmp	0xdcc	; 0xdcc <__tablejump2__>
		  case 0x00: i2cbuffer = a0; break;
     566:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <a0>
     56a:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <a0+0x1>
		  case 0x0B: i2cbuffer = freeRam(); break;
     56e:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <i2cbuffer+0x1>
     572:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <i2cbuffer>
      TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
     576:	85 ec       	ldi	r24, 0xC5	; 197
     578:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
      if ((commandbyte == 0x92) & (twdrbuffer == 0x02)) {_delay_us(25); PORTB &= ~_BV(PB5);}
     57c:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <commandbyte>
     580:	82 39       	cpi	r24, 0x92	; 146
     582:	29 f6       	brne	.-118    	; 0x50e <__vector_36+0x76>
     584:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <twdrbuffer>
     588:	82 30       	cpi	r24, 0x02	; 2
     58a:	09 f6       	brne	.-126    	; 0x50e <__vector_36+0x76>
     58c:	85 e8       	ldi	r24, 0x85	; 133
     58e:	8a 95       	dec	r24
     590:	f1 f7       	brne	.-4      	; 0x58e <__vector_36+0xf6>
     592:	00 00       	nop
     594:	2d 98       	cbi	0x05, 5	; 5
     596:	bb cf       	rjmp	.-138    	; 0x50e <__vector_36+0x76>
		  case 0x01: i2cbuffer = a1; break;
     598:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <a1>
     59c:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <a1+0x1>
     5a0:	e6 cf       	rjmp	.-52     	; 0x56e <__vector_36+0xd6>
		  case 0x02: i2cbuffer = a2; break;
     5a2:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <a2>
     5a6:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <a2+0x1>
     5aa:	e1 cf       	rjmp	.-62     	; 0x56e <__vector_36+0xd6>
		  case 0x03: i2cbuffer = a3; break;
     5ac:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <a3>
     5b0:	90 91 b4 01 	lds	r25, 0x01B4	; 0x8001b4 <a3+0x1>
     5b4:	dc cf       	rjmp	.-72     	; 0x56e <__vector_36+0xd6>
		  case 0x04: i2cbuffer = a4; break;
     5b6:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <a4>
     5ba:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <a4+0x1>
     5be:	d7 cf       	rjmp	.-82     	; 0x56e <__vector_36+0xd6>
		  case 0x05: i2cbuffer = a5; break;
     5c0:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <a5>
     5c4:	90 91 c6 01 	lds	r25, 0x01C6	; 0x8001c6 <a5+0x1>
     5c8:	d2 cf       	rjmp	.-92     	; 0x56e <__vector_36+0xd6>
		  case 0x06: i2cbuffer = a7; break;
     5ca:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <a7>
     5ce:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <a7+0x1>
     5d2:	cd cf       	rjmp	.-102    	; 0x56e <__vector_36+0xd6>
		  case 0x08: i2cbuffer = rpm;break;
     5d4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <rpm>
     5d8:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <rpm+0x1>
     5dc:	c8 cf       	rjmp	.-112    	; 0x56e <__vector_36+0xd6>
		  case 0x09: i2cbuffer = vcc; break;
     5de:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <vcc>
     5e2:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <vcc+0x1>
     5e6:	c3 cf       	rjmp	.-122    	; 0x56e <__vector_36+0xd6>
		  case 0x0A: i2cbuffer = temp;break;
     5e8:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <temp>
     5ec:	90 91 b2 01 	lds	r25, 0x01B2	; 0x8001b2 <temp+0x1>
     5f0:	be cf       	rjmp	.-132    	; 0x56e <__vector_36+0xd6>
		  case 0x0B: i2cbuffer = freeRam(); break;
     5f2:	0e 94 03 02 	call	0x406	; 0x406 <freeRam>
     5f6:	bb cf       	rjmp	.-138    	; 0x56e <__vector_36+0xd6>
		  case 0x14: i2cbuffer = a7avg; break;
     5f8:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <a7avg>
     5fc:	90 91 c2 01 	lds	r25, 0x01C2	; 0x8001c2 <a7avg+0x1>
     600:	b6 cf       	rjmp	.-148    	; 0x56e <__vector_36+0xd6>
      if (buffer_address == 0) {twdrbuffer = TWDR; crc = _crc8_ccitt_update(crc,TWDR);}
     602:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <crc>
     606:	91 11       	cpse	r25, r1
     608:	10 c0       	rjmp	.+32     	; 0x62a <__vector_36+0x192>
     60a:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     60e:	90 93 bc 01 	sts	0x01BC, r25	; 0x8001bc <twdrbuffer>
     612:	60 91 bb 00 	lds	r22, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     616:	0e 94 75 00 	call	0xea	; 0xea <_crc8_ccitt_update>
     61a:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <crc>
      buffer_address++;
     61e:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <buffer_address>
     622:	8f 5f       	subi	r24, 0xFF	; 255
     624:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <buffer_address>
     628:	a6 cf       	rjmp	.-180    	; 0x576 <__vector_36+0xde>
      else  if ((buffer_address == 1) & (TWDR == crc)) {
     62a:	20 91 bb 00 	lds	r18, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     62e:	91 30       	cpi	r25, 0x01	; 1
     630:	09 f0       	breq	.+2      	; 0x634 <__vector_36+0x19c>
     632:	72 c0       	rjmp	.+228    	; 0x718 <__vector_36+0x280>
     634:	28 13       	cpse	r18, r24
     636:	70 c0       	rjmp	.+224    	; 0x718 <__vector_36+0x280>
           if (commandbyte == 0x87 ) {newbllevel = twdrbuffer;}
     638:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <commandbyte>
     63c:	87 38       	cpi	r24, 0x87	; 135
     63e:	29 f4       	brne	.+10     	; 0x64a <__vector_36+0x1b2>
     640:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <twdrbuffer>
     644:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <newbllevel>
     648:	ea cf       	rjmp	.-44     	; 0x61e <__vector_36+0x186>
      else if (commandbyte == 0x8D ) {if (twdrbuffer == 0xFF) {PORTC |= _BV(PC6);} else {PORTC &= ~_BV(PC6); }}  //set Relais 1
     64a:	8d 38       	cpi	r24, 0x8D	; 141
     64c:	41 f4       	brne	.+16     	; 0x65e <__vector_36+0x1c6>
     64e:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <twdrbuffer>
     652:	8f 3f       	cpi	r24, 0xFF	; 255
     654:	11 f4       	brne	.+4      	; 0x65a <__vector_36+0x1c2>
     656:	46 9a       	sbi	0x08, 6	; 8
     658:	e2 cf       	rjmp	.-60     	; 0x61e <__vector_36+0x186>
     65a:	46 98       	cbi	0x08, 6	; 8
     65c:	e0 cf       	rjmp	.-64     	; 0x61e <__vector_36+0x186>
      else if (commandbyte == 0x8E ) {if (twdrbuffer == 0xFF) {PORTB |= _BV(PB4);} else {PORTB &= ~_BV(PB4); }}  //set Relais 2
     65e:	8e 38       	cpi	r24, 0x8E	; 142
     660:	41 f4       	brne	.+16     	; 0x672 <__vector_36+0x1da>
     662:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <twdrbuffer>
     666:	8f 3f       	cpi	r24, 0xFF	; 255
     668:	11 f4       	brne	.+4      	; 0x66e <__vector_36+0x1d6>
     66a:	2c 9a       	sbi	0x05, 4	; 5
     66c:	d8 cf       	rjmp	.-80     	; 0x61e <__vector_36+0x186>
     66e:	2c 98       	cbi	0x05, 4	; 5
     670:	d6 cf       	rjmp	.-84     	; 0x61e <__vector_36+0x186>
      else if (commandbyte == 0x8F ) {if (twdrbuffer == 0xFF) {PORTB |= _BV(PB6);} else {PORTB &= ~_BV(PB6); }} //set Relais 3
     672:	8f 38       	cpi	r24, 0x8F	; 143
     674:	41 f4       	brne	.+16     	; 0x686 <__vector_36+0x1ee>
     676:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <twdrbuffer>
     67a:	8f 3f       	cpi	r24, 0xFF	; 255
     67c:	11 f4       	brne	.+4      	; 0x682 <__vector_36+0x1ea>
     67e:	2e 9a       	sbi	0x05, 6	; 5
     680:	ce cf       	rjmp	.-100    	; 0x61e <__vector_36+0x186>
     682:	2e 98       	cbi	0x05, 6	; 5
     684:	cc cf       	rjmp	.-104    	; 0x61e <__vector_36+0x186>
      else if (commandbyte == 0x90 ) {if (twdrbuffer == 0xFF) {PORTC |= _BV(PC7);} else {PORTC &= ~_BV(PC7); }} //set D13
     686:	80 39       	cpi	r24, 0x90	; 144
     688:	41 f4       	brne	.+16     	; 0x69a <__vector_36+0x202>
     68a:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <twdrbuffer>
     68e:	8f 3f       	cpi	r24, 0xFF	; 255
     690:	11 f4       	brne	.+4      	; 0x696 <__vector_36+0x1fe>
     692:	47 9a       	sbi	0x08, 7	; 8
     694:	c4 cf       	rjmp	.-120    	; 0x61e <__vector_36+0x186>
     696:	47 98       	cbi	0x08, 7	; 8
     698:	c2 cf       	rjmp	.-124    	; 0x61e <__vector_36+0x186>
      else if (commandbyte == 0x91 ) {if (twdrbuffer == 0xFF) {PORTE |=  (1<<2);}  else {PORTE &= ~(1<<2);   }}     //set HWB ->Gasheater      (D13 on prototypes)
     69a:	81 39       	cpi	r24, 0x91	; 145
     69c:	41 f4       	brne	.+16     	; 0x6ae <__vector_36+0x216>
     69e:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <twdrbuffer>
     6a2:	8f 3f       	cpi	r24, 0xFF	; 255
     6a4:	11 f4       	brne	.+4      	; 0x6aa <__vector_36+0x212>
     6a6:	72 9a       	sbi	0x0e, 2	; 14
     6a8:	ba cf       	rjmp	.-140    	; 0x61e <__vector_36+0x186>
     6aa:	72 98       	cbi	0x0e, 2	; 14
     6ac:	b8 cf       	rjmp	.-144    	; 0x61e <__vector_36+0x186>
      else if (commandbyte == 0x92 ) {if (twdrbuffer == 0xFF) {PORTB |= _BV(PB5);} else if (twdrbuffer == 0x01) {PORTB |= _BV(PB5); twdrbuffer = 0x02;} else {PORTB &= ~_BV(PB5);twdrbuffer = 0x00;}}   //set Buzzer
     6ae:	82 39       	cpi	r24, 0x92	; 146
     6b0:	89 f4       	brne	.+34     	; 0x6d4 <__vector_36+0x23c>
     6b2:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <twdrbuffer>
     6b6:	8f 3f       	cpi	r24, 0xFF	; 255
     6b8:	11 f4       	brne	.+4      	; 0x6be <__vector_36+0x226>
     6ba:	2d 9a       	sbi	0x05, 5	; 5
     6bc:	b0 cf       	rjmp	.-160    	; 0x61e <__vector_36+0x186>
     6be:	81 30       	cpi	r24, 0x01	; 1
     6c0:	29 f4       	brne	.+10     	; 0x6cc <__vector_36+0x234>
     6c2:	2d 9a       	sbi	0x05, 5	; 5
     6c4:	82 e0       	ldi	r24, 0x02	; 2
     6c6:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <twdrbuffer>
     6ca:	a9 cf       	rjmp	.-174    	; 0x61e <__vector_36+0x186>
     6cc:	2d 98       	cbi	0x05, 5	; 5
     6ce:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <twdrbuffer>
     6d2:	a5 cf       	rjmp	.-182    	; 0x61e <__vector_36+0x186>
      else if (commandbyte == 0x93 ) {OCR0A = twdrbuffer;fanlevel = twdrbuffer;}  //set Vent
     6d4:	83 39       	cpi	r24, 0x93	; 147
     6d6:	41 f4       	brne	.+16     	; 0x6e8 <__vector_36+0x250>
     6d8:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <twdrbuffer>
     6dc:	87 bd       	out	0x27, r24	; 39
     6de:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <twdrbuffer>
     6e2:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <fanlevel>
     6e6:	9b cf       	rjmp	.-202    	; 0x61e <__vector_36+0x186>
      else if (commandbyte == 0x94 ) {led[0].r = twdrbuffer;changeled = 1;}  //set r color
     6e8:	84 39       	cpi	r24, 0x94	; 148
     6ea:	41 f4       	brne	.+16     	; 0x6fc <__vector_36+0x264>
     6ec:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <twdrbuffer>
     6f0:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <led+0x1>
      else if (commandbyte == 0x96 ) {led[0].b = twdrbuffer;changeled = 1;}  //set b color
     6f4:	81 e0       	ldi	r24, 0x01	; 1
     6f6:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <changeled>
     6fa:	91 cf       	rjmp	.-222    	; 0x61e <__vector_36+0x186>
      else if (commandbyte == 0x95 ) {led[0].g = twdrbuffer;changeled = 1;}  //set g color
     6fc:	85 39       	cpi	r24, 0x95	; 149
     6fe:	29 f4       	brne	.+10     	; 0x70a <__vector_36+0x272>
     700:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <twdrbuffer>
     704:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <led>
     708:	f5 cf       	rjmp	.-22     	; 0x6f4 <__vector_36+0x25c>
      else if (commandbyte == 0x96 ) {led[0].b = twdrbuffer;changeled = 1;}  //set b color
     70a:	86 39       	cpi	r24, 0x96	; 150
     70c:	29 f4       	brne	.+10     	; 0x718 <__vector_36+0x280>
     70e:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <twdrbuffer>
     712:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <led+0x2>
     716:	ee cf       	rjmp	.-36     	; 0x6f4 <__vector_36+0x25c>
      else {i2cerror++;} 
     718:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <i2cerror>
     71c:	8f 5f       	subi	r24, 0xFF	; 255
     71e:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <i2cerror>
     722:	7d cf       	rjmp	.-262    	; 0x61e <__vector_36+0x186>
     724:	e7 38       	cpi	r30, 0x87	; 135
     726:	21 f0       	breq	.+8      	; 0x730 <__vector_36+0x298>
     728:	ed 58       	subi	r30, 0x8D	; 141
     72a:	ea 30       	cpi	r30, 0x0A	; 10
     72c:	08 f0       	brcs	.+2      	; 0x730 <__vector_36+0x298>
     72e:	76 c0       	rjmp	.+236    	; 0x81c <__vector_36+0x384>
                 case 0x96:  { TWDR = crc;  crc = 0xFF;} break;
     730:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <crc>
     734:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     738:	8f ef       	ldi	r24, 0xFF	; 255
                                if (buffer_address == 0)  {TWDR = led[0].r; crc = _crc8_ccitt_update(crc,TWDR);}  
     73a:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <crc>
      buffer_address++;
     73e:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <buffer_address>
     742:	8f 5f       	subi	r24, 0xFF	; 255
     744:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <buffer_address>
      TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);        
     748:	c4 ce       	rjmp	.-632    	; 0x4d2 <__vector_36+0x3a>
                                 if (buffer_address == 0) {TWDR = i2cbuffer & 0xFF; crc = _crc8_ccitt_update(crc,TWDR);}
     74a:	81 11       	cpse	r24, r1
     74c:	0b c0       	rjmp	.+22     	; 0x764 <__vector_36+0x2cc>
     74e:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <i2cbuffer>
                                if (buffer_address == 0)  {TWDR = led[0].r; crc = _crc8_ccitt_update(crc,TWDR);}  
     752:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     756:	60 91 bb 00 	lds	r22, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     75a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <crc>
     75e:	0e 94 75 00 	call	0xea	; 0xea <_crc8_ccitt_update>
     762:	eb cf       	rjmp	.-42     	; 0x73a <__vector_36+0x2a2>
                            else if (buffer_address == 1) {TWDR = i2cbuffer >> 8;   crc = _crc8_ccitt_update(crc,TWDR);}
     764:	81 30       	cpi	r24, 0x01	; 1
     766:	19 f4       	brne	.+6      	; 0x76e <__vector_36+0x2d6>
     768:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <i2cbuffer+0x1>
     76c:	f2 cf       	rjmp	.-28     	; 0x752 <__vector_36+0x2ba>
                            else if (buffer_address == 2) {TWDR = crc;}
     76e:	82 30       	cpi	r24, 0x02	; 2
     770:	b1 f4       	brne	.+44     	; 0x79e <__vector_36+0x306>
                            else if (buffer_address == 1) {TWDR = crc;}
     772:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <crc>
                 default: TWDR = 0xFF; 
     776:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     77a:	e1 cf       	rjmp	.-62     	; 0x73e <__vector_36+0x2a6>
                                if (buffer_address == 0)  {TWDR = led[0].r; crc = _crc8_ccitt_update(crc,TWDR);}  
     77c:	81 11       	cpse	r24, r1
     77e:	03 c0       	rjmp	.+6      	; 0x786 <__vector_36+0x2ee>
     780:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <led+0x1>
     784:	e6 cf       	rjmp	.-52     	; 0x752 <__vector_36+0x2ba>
                           else if (buffer_address == 1)  {TWDR = led[0].g; crc = _crc8_ccitt_update(crc,TWDR);}
     786:	81 30       	cpi	r24, 0x01	; 1
     788:	19 f4       	brne	.+6      	; 0x790 <__vector_36+0x2f8>
     78a:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <led>
     78e:	e1 cf       	rjmp	.-62     	; 0x752 <__vector_36+0x2ba>
                           else if (buffer_address == 2)  {TWDR = led[0].b; crc = _crc8_ccitt_update(crc,TWDR);}
     790:	82 30       	cpi	r24, 0x02	; 2
     792:	19 f4       	brne	.+6      	; 0x79a <__vector_36+0x302>
     794:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <led+0x2>
     798:	dc cf       	rjmp	.-72     	; 0x752 <__vector_36+0x2ba>
                           else if (buffer_address == 3)  {TWDR = crc;}
     79a:	83 30       	cpi	r24, 0x03	; 3
     79c:	51 f3       	breq	.-44     	; 0x772 <__vector_36+0x2da>
                            else                          {TWDR = 0xFF; i2cerror++;}
     79e:	8f ef       	ldi	r24, 0xFF	; 255
     7a0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     7a4:	29 c0       	rjmp	.+82     	; 0x7f8 <__vector_36+0x360>
                                     if (buffer_address == 0) {TWDR = bllevel; crc = _crc8_ccitt_update(crc,TWDR);}
     7a6:	81 11       	cpse	r24, r1
     7a8:	36 c0       	rjmp	.+108    	; 0x816 <__vector_36+0x37e>
     7aa:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <bllevel>
     7ae:	d1 cf       	rjmp	.-94     	; 0x752 <__vector_36+0x2ba>
                                 if (buffer_address == 0) {if (bit_is_set(PINC,PC6)) {TWDR = 0xFF;} else {TWDR = 0x00;} crc = _crc8_ccitt_update(crc,TWDR);}
     7b0:	81 11       	cpse	r24, r1
     7b2:	31 c0       	rjmp	.+98     	; 0x816 <__vector_36+0x37e>
     7b4:	36 9b       	sbis	0x06, 6	; 6
     7b6:	06 c0       	rjmp	.+12     	; 0x7c4 <__vector_36+0x32c>
                                 if (buffer_address == 0)  {if (bit_is_set(PINB,PB5)) {TWDR = 0xFF;} else {TWDR = 0x00;} crc = _crc8_ccitt_update(crc,TWDR);}
     7b8:	8f ef       	ldi	r24, 0xFF	; 255
     7ba:	cb cf       	rjmp	.-106    	; 0x752 <__vector_36+0x2ba>
                                 if (buffer_address == 0) {if (bit_is_set(PINB,PB4)) {TWDR = 0xFF;} else {TWDR = 0x00;} crc = _crc8_ccitt_update(crc,TWDR);}
     7bc:	81 11       	cpse	r24, r1
     7be:	2b c0       	rjmp	.+86     	; 0x816 <__vector_36+0x37e>
     7c0:	1c 99       	sbic	0x03, 4	; 3
     7c2:	fa cf       	rjmp	.-12     	; 0x7b8 <__vector_36+0x320>
                                 if (buffer_address == 0)  {if (bit_is_set(PINB,PB5)) {TWDR = 0xFF;} else {TWDR = 0x00;} crc = _crc8_ccitt_update(crc,TWDR);}
     7c4:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     7c8:	c6 cf       	rjmp	.-116    	; 0x756 <__vector_36+0x2be>
                                 if (buffer_address == 0) {if (bit_is_set(PINB,PB6)) {TWDR = 0xFF;} else {TWDR = 0x00;} crc = _crc8_ccitt_update(crc,TWDR);}
     7ca:	81 11       	cpse	r24, r1
     7cc:	24 c0       	rjmp	.+72     	; 0x816 <__vector_36+0x37e>
     7ce:	1e 9b       	sbis	0x03, 6	; 3
     7d0:	f9 cf       	rjmp	.-14     	; 0x7c4 <__vector_36+0x32c>
     7d2:	f2 cf       	rjmp	.-28     	; 0x7b8 <__vector_36+0x320>
                                 if (buffer_address == 0) {if (bit_is_set(PINC,PC7)) {TWDR = 0xFF;} else {TWDR = 0x00;} crc = _crc8_ccitt_update(crc,TWDR);}
     7d4:	81 11       	cpse	r24, r1
     7d6:	1f c0       	rjmp	.+62     	; 0x816 <__vector_36+0x37e>
     7d8:	37 9b       	sbis	0x06, 7	; 6
     7da:	f4 cf       	rjmp	.-24     	; 0x7c4 <__vector_36+0x32c>
     7dc:	ed cf       	rjmp	.-38     	; 0x7b8 <__vector_36+0x320>
                                 if (buffer_address == 0) {if (bit_is_set(PINE,PE2)) {TWDR = 0xFF;} else {TWDR = 0x00;} crc = _crc8_ccitt_update(crc,TWDR);}
     7de:	81 11       	cpse	r24, r1
     7e0:	03 c0       	rjmp	.+6      	; 0x7e8 <__vector_36+0x350>
     7e2:	62 9b       	sbis	0x0c, 2	; 12
     7e4:	ef cf       	rjmp	.-34     	; 0x7c4 <__vector_36+0x32c>
     7e6:	e8 cf       	rjmp	.-48     	; 0x7b8 <__vector_36+0x320>
                            else if (buffer_address == 1) {TWDR = crc;}
     7e8:	81 30       	cpi	r24, 0x01	; 1
     7ea:	19 f2       	breq	.-122    	; 0x772 <__vector_36+0x2da>
                            else                          {TWDR = 0xFF; buffer_address = 0xFE; i2cerror++;}
     7ec:	8f ef       	ldi	r24, 0xFF	; 255
     7ee:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     7f2:	8e ef       	ldi	r24, 0xFE	; 254
     7f4:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <buffer_address>
                            else                          {TWDR = 0xFF; i2cerror++;}
     7f8:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <i2cerror>
     7fc:	8f 5f       	subi	r24, 0xFF	; 255
     7fe:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <i2cerror>
     802:	9d cf       	rjmp	.-198    	; 0x73e <__vector_36+0x2a6>
                                 if (buffer_address == 0)  {if (bit_is_set(PINB,PB5)) {TWDR = 0xFF;} else {TWDR = 0x00;} crc = _crc8_ccitt_update(crc,TWDR);}
     804:	81 11       	cpse	r24, r1
     806:	07 c0       	rjmp	.+14     	; 0x816 <__vector_36+0x37e>
     808:	1d 9b       	sbis	0x03, 5	; 3
     80a:	dc cf       	rjmp	.-72     	; 0x7c4 <__vector_36+0x32c>
     80c:	d5 cf       	rjmp	.-86     	; 0x7b8 <__vector_36+0x320>
                                 if (buffer_address == 0) {TWDR = OCR0A; crc = _crc8_ccitt_update(crc,TWDR);}
     80e:	81 11       	cpse	r24, r1
     810:	02 c0       	rjmp	.+4      	; 0x816 <__vector_36+0x37e>
     812:	87 b5       	in	r24, 0x27	; 39
     814:	9e cf       	rjmp	.-196    	; 0x752 <__vector_36+0x2ba>
                            else if (buffer_address == 1) {TWDR = crc;}
     816:	81 30       	cpi	r24, 0x01	; 1
     818:	11 f6       	brne	.-124    	; 0x79e <__vector_36+0x306>
     81a:	ab cf       	rjmp	.-170    	; 0x772 <__vector_36+0x2da>
                 default: TWDR = 0xFF; 
     81c:	8f ef       	ldi	r24, 0xFF	; 255
     81e:	ab cf       	rjmp	.-170    	; 0x776 <__vector_36+0x2de>
     TWCR =   (1<<TWSTO)|(1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
     820:	85 ed       	ldi	r24, 0xD5	; 213
      TWCR = (1<<TWEN)|(1<<TWIE)|(1<<TWINT)| (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|  (0<<TWWC);   
     822:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
}
     826:	73 ce       	rjmp	.-794    	; 0x50e <__vector_36+0x76>

00000828 <setup>:


void setup(void)
{
     828:	cf 93       	push	r28
     82a:	df 93       	push	r29
   DDRF = 0b00000000;
     82c:	10 ba       	out	0x10, r1	; 16
   DDRD = 0b01111000;
     82e:	88 e7       	ldi	r24, 0x78	; 120
     830:	8a b9       	out	0x0a, r24	; 10
   PORTD= 0b00000000;
     832:	1b b8       	out	0x0b, r1	; 11
   DDRE = 0b00000000;   // DDRE |= (1<<2);   be carefull with hwb, check if its connected to GND via 10k (prototypes!)
     834:	1d b8       	out	0x0d, r1	; 13
   DDRB = 0b11110110;
     836:	86 ef       	ldi	r24, 0xF6	; 246
     838:	84 b9       	out	0x04, r24	; 4
   DDRC = 0b11000000;
     83a:	80 ec       	ldi	r24, 0xC0	; 192
     83c:	87 b9       	out	0x07, r24	; 7
   OCR0A = 0;           //    start value for FAN  0 / 255  (-> p-channel so inverted)       0x00 is ON  0xFF is OFF
     83e:	17 bc       	out	0x27, r1	; 39
   TCCR0B  =  0b00000001;
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	85 bd       	out	0x25, r24	; 37
   TCCR0A  =  0b10000001;            // 8bit dual slope 31khz
     844:	81 e8       	ldi	r24, 0x81	; 129
     846:	84 bd       	out	0x24, r24	; 36
   TIMSK0 |= (1 << TOIE0);            // init interrupt for timer0 overflow
     848:	ee e6       	ldi	r30, 0x6E	; 110
     84a:	f0 e0       	ldi	r31, 0x00	; 0
     84c:	80 81       	ld	r24, Z
     84e:	81 60       	ori	r24, 0x01	; 1
     850:	80 83       	st	Z, r24
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     852:	80 e8       	ldi	r24, 0x80	; 128
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	0f b6       	in	r0, 0x3f	; 63
     858:	f8 94       	cli
     85a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     85e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     862:	0f be       	out	0x3f, r0	; 63
   clock_prescale_set(clock_div_1);
   I2C_init(I2C_ADDR);
     864:	8a e2       	ldi	r24, 0x2A	; 42
     866:	0e 94 1a 02 	call	0x434	; 0x434 <I2C_init>
   PCICR |= _BV(PCIE0);              // enable pin change interrupt for PB0 (rpm)
     86a:	e8 e6       	ldi	r30, 0x68	; 104
     86c:	f0 e0       	ldi	r31, 0x00	; 0
     86e:	80 81       	ld	r24, Z
     870:	81 60       	ori	r24, 0x01	; 1
     872:	80 83       	st	Z, r24
   PCMSK0 |= _BV(PCINT0);
     874:	eb e6       	ldi	r30, 0x6B	; 107
     876:	f0 e0       	ldi	r31, 0x00	; 0
     878:	80 81       	ld	r24, Z
     87a:	81 60       	ori	r24, 0x01	; 1
     87c:	80 83       	st	Z, r24
   sei();
     87e:	78 94       	sei
   led[0].r = 255;
     880:	c7 eb       	ldi	r28, 0xB7	; 183
     882:	d1 e0       	ldi	r29, 0x01	; 1
     884:	8f ef       	ldi	r24, 0xFF	; 255
     886:	89 83       	std	Y+1, r24	; 0x01
   led[0].g = 255;
     888:	88 83       	st	Y, r24
   led[0].b = 255;
     88a:	8a 83       	std	Y+2, r24	; 0x02
   ws2812_setleds(led,1);
     88c:	61 e0       	ldi	r22, 0x01	; 1
     88e:	70 e0       	ldi	r23, 0x00	; 0
     890:	ce 01       	movw	r24, r28
     892:	0e 94 ba 00 	call	0x174	; 0x174 <ws2812_setleds>
   setup_lcd();
     896:	0e 94 44 01 	call	0x288	; 0x288 <setup_lcd>
   initbl();
     89a:	0e 94 fd 00 	call	0x1fa	; 0x1fa <initbl>
   led[0].r = 0;
     89e:	19 82       	std	Y+1, r1	; 0x01
   led[0].g = 0;
     8a0:	18 82       	st	Y, r1
   led[0].b = 0;
     8a2:	1a 82       	std	Y+2, r1	; 0x02
   ws2812_setleds(led,1);
     8a4:	61 e0       	ldi	r22, 0x01	; 1
     8a6:	70 e0       	ldi	r23, 0x00	; 0
     8a8:	ce 01       	movw	r24, r28
     8aa:	0e 94 ba 00 	call	0x174	; 0x174 <ws2812_setleds>
   OCR0A = 210;
     8ae:	82 ed       	ldi	r24, 0xD2	; 210
     8b0:	87 bd       	out	0x27, r24	; 39
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     8b2:	88 e1       	ldi	r24, 0x18	; 24
     8b4:	99 e2       	ldi	r25, 0x29	; 41
     8b6:	0f b6       	in	r0, 0x3f	; 63
     8b8:	f8 94       	cli
     8ba:	a8 95       	wdr
     8bc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     8c0:	0f be       	out	0x3f, r0	; 63
     8c2:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
   wdt_enable(WDTO_8S);
   bllevel = 0;
     8c6:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <bllevel>
   newbllevel = 31;
     8ca:	8f e1       	ldi	r24, 0x1F	; 31
     8cc:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <newbllevel>
}
     8d0:	df 91       	pop	r29
     8d2:	cf 91       	pop	r28
     8d4:	08 95       	ret

000008d6 <main>:


int main(void)
{
     8d6:	00 d0       	rcall	.+0      	; 0x8d8 <main+0x2>
     8d8:	00 d0       	rcall	.+0      	; 0x8da <main+0x4>
     8da:	cd b7       	in	r28, 0x3d	; 61
     8dc:	de b7       	in	r29, 0x3e	; 62
  uint8_t adcselect = 0;
  setup();
     8de:	0e 94 14 04 	call	0x828	; 0x828 <setup>
  uint8_t adcselect = 0;
     8e2:	10 e0       	ldi	r17, 0x00	; 0
  while(1) {  

  if (!SDA_LINE) {i2cerror++;}
  
  if (i2cerror > 50) {
  TWCR =   (1<<TWSTO)|(1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (0<<TWEN); 
     8e4:	01 ed       	ldi	r16, 0xD1	; 209
  sei();
  }                    

  wdt_reset();	
  if (isrtimer > 31250)   // routine for calculate fan speed - timer is 32khz
  {rpm = fanspin * 30;    // 2 signals each turn        
     8e6:	5e e1       	ldi	r21, 0x1E	; 30
     8e8:	f5 2e       	mov	r15, r21
  if (!SDA_LINE) {i2cerror++;}
     8ea:	49 99       	sbic	0x09, 1	; 9
     8ec:	05 c0       	rjmp	.+10     	; 0x8f8 <main+0x22>
     8ee:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <i2cerror>
     8f2:	8f 5f       	subi	r24, 0xFF	; 255
     8f4:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <i2cerror>
  if (i2cerror > 50) {
     8f8:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <i2cerror>
     8fc:	83 33       	cpi	r24, 0x33	; 51
     8fe:	40 f0       	brcs	.+16     	; 0x910 <main+0x3a>
  TWCR =   (1<<TWSTO)|(1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (0<<TWEN); 
     900:	00 93 bc 00 	sts	0x00BC, r16	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  I2C_init(I2C_ADDR); 
     904:	8a e2       	ldi	r24, 0x2A	; 42
     906:	0e 94 1a 02 	call	0x434	; 0x434 <I2C_init>
  i2cerror = 0;
     90a:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <i2cerror>
  sei();
     90e:	78 94       	sei
  wdt_reset();	
     910:	a8 95       	wdr
  if (isrtimer > 31250)   // routine for calculate fan speed - timer is 32khz
     912:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <isrtimer>
     916:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <isrtimer+0x1>
     91a:	83 31       	cpi	r24, 0x13	; 19
     91c:	9a 47       	sbci	r25, 0x7A	; 122
     91e:	48 f1       	brcs	.+82     	; 0x972 <main+0x9c>
  {rpm = fanspin * 30;    // 2 signals each turn        
     920:	20 91 ba 01 	lds	r18, 0x01BA	; 0x8001ba <fanspin>
     924:	30 91 bb 01 	lds	r19, 0x01BB	; 0x8001bb <fanspin+0x1>
     928:	f2 9e       	mul	r15, r18
     92a:	c0 01       	movw	r24, r0
     92c:	f3 9e       	mul	r15, r19
     92e:	90 0d       	add	r25, r0
     930:	11 24       	eor	r1, r1
     932:	90 93 be 01 	sts	0x01BE, r25	; 0x8001be <rpm+0x1>
     936:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <rpm>
  fanspin = 0;
     93a:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <fanspin+0x1>
     93e:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <fanspin>
  isrtimer = 0;
     942:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <isrtimer+0x1>
     946:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <isrtimer>
  if (fanlevel == 254) { //fan minimal auto
     94a:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <fanlevel>
     94e:	2e 3f       	cpi	r18, 0xFE	; 254
     950:	81 f4       	brne	.+32     	; 0x972 <main+0x9c>
  if (rpm > 4400) {OCR0A++;}
     952:	81 33       	cpi	r24, 0x31	; 49
     954:	91 41       	sbci	r25, 0x11	; 17
     956:	18 f0       	brcs	.+6      	; 0x95e <main+0x88>
     958:	87 b5       	in	r24, 0x27	; 39
     95a:	8f 5f       	subi	r24, 0xFF	; 255
     95c:	87 bd       	out	0x27, r24	; 39
  if (rpm < 3600) {OCR0A--;}
     95e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <rpm>
     962:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <rpm+0x1>
     966:	80 31       	cpi	r24, 0x10	; 16
     968:	9e 40       	sbci	r25, 0x0E	; 14
     96a:	18 f4       	brcc	.+6      	; 0x972 <main+0x9c>
     96c:	87 b5       	in	r24, 0x27	; 39
     96e:	81 50       	subi	r24, 0x01	; 1
     970:	87 bd       	out	0x27, r24	; 39
  }
  }

  if (changeled)  {
     972:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <changeled>
     976:	88 23       	and	r24, r24
     978:	41 f0       	breq	.+16     	; 0x98a <main+0xb4>
      ws2812_setleds(led,1);
     97a:	61 e0       	ldi	r22, 0x01	; 1
     97c:	70 e0       	ldi	r23, 0x00	; 0
     97e:	87 eb       	ldi	r24, 0xB7	; 183
     980:	91 e0       	ldi	r25, 0x01	; 1
     982:	0e 94 ba 00 	call	0x174	; 0x174 <ws2812_setleds>
      changeled = 0;
     986:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <changeled>
                     }

  if (0 <= newbllevel && newbllevel < 32) {
     98a:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <newbllevel>
     98e:	90 32       	cpi	r25, 0x20	; 32
     990:	00 f5       	brcc	.+64     	; 0x9d2 <main+0xfc>
  if (newbllevel < bllevel) {                // smooth backlight level change in steps
     992:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <bllevel>
     996:	98 17       	cp	r25, r24
     998:	58 f4       	brcc	.+22     	; 0x9b0 <main+0xda>

      bllevel--;
     99a:	81 50       	subi	r24, 0x01	; 1
     99c:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <bllevel>
      writebl(0b01011000);   writebl(0b00011111 & bllevel);
     9a0:	88 e5       	ldi	r24, 0x58	; 88
     9a2:	0e 94 c0 00 	call	0x180	; 0x180 <writebl>
     9a6:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <bllevel>
     9aa:	8f 71       	andi	r24, 0x1F	; 31
     9ac:	0e 94 c0 00 	call	0x180	; 0x180 <writebl>
	  }

     if (newbllevel > bllevel) {
     9b0:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <bllevel>
     9b4:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <newbllevel>
     9b8:	89 17       	cp	r24, r25
     9ba:	58 f4       	brcc	.+22     	; 0x9d2 <main+0xfc>

	  bllevel++;
     9bc:	8f 5f       	subi	r24, 0xFF	; 255
     9be:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <bllevel>
	   writebl(0b01011000);   writebl(0b00011111 & bllevel);
     9c2:	88 e5       	ldi	r24, 0x58	; 88
     9c4:	0e 94 c0 00 	call	0x180	; 0x180 <writebl>
     9c8:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <bllevel>
     9cc:	8f 71       	andi	r24, 0x1F	; 31
     9ce:	0e 94 c0 00 	call	0x180	; 0x180 <writebl>

	  }}

  if (adcselect < 10) {adcselect++;} else {adcselect = 0;}
     9d2:	1a 30       	cpi	r17, 0x0A	; 10
     9d4:	58 f4       	brcc	.+22     	; 0x9ec <main+0x116>
     9d6:	1f 5f       	subi	r17, 0xFF	; 255
  
  switch(adcselect)
     9d8:	ef ef       	ldi	r30, 0xFF	; 255
     9da:	e1 0f       	add	r30, r17
     9dc:	ea 30       	cpi	r30, 0x0A	; 10
     9de:	08 f0       	brcs	.+2      	; 0x9e2 <main+0x10c>
     9e0:	44 c0       	rjmp	.+136    	; 0xa6a <main+0x194>
     9e2:	f0 e0       	ldi	r31, 0x00	; 0
     9e4:	e4 5a       	subi	r30, 0xA4	; 164
     9e6:	f7 4f       	sbci	r31, 0xF7	; 247
     9e8:	0c 94 e6 06 	jmp	0xdcc	; 0xdcc <__tablejump2__>
  {
   case 0: a0 = readAna(7);  break;
     9ec:	87 e0       	ldi	r24, 0x07	; 7
     9ee:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <readAna>
     9f2:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <a0+0x1>
     9f6:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <a0>
     9fa:	10 e0       	ldi	r17, 0x00	; 0
     9fc:	76 cf       	rjmp	.-276    	; 0x8ea <main+0x14>
   case 1: a1 = readAna(6);  break;
     9fe:	86 e0       	ldi	r24, 0x06	; 6
     a00:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <readAna>
     a04:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <a1+0x1>
     a08:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <a1>
     a0c:	6e cf       	rjmp	.-292    	; 0x8ea <main+0x14>
   case 2: a2 = readAna(5);  break;
     a0e:	85 e0       	ldi	r24, 0x05	; 5
     a10:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <readAna>
     a14:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <a2+0x1>
     a18:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <a2>
     a1c:	66 cf       	rjmp	.-308    	; 0x8ea <main+0x14>
   case 4: a3 = readAna(4);  break; 
     a1e:	84 e0       	ldi	r24, 0x04	; 4
     a20:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <readAna>
     a24:	90 93 b4 01 	sts	0x01B4, r25	; 0x8001b4 <a3+0x1>
     a28:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <a3>
     a2c:	5e cf       	rjmp	.-324    	; 0x8ea <main+0x14>
   case 5: a4 = readAna(1);  break; 
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <readAna>
     a34:	90 93 d1 01 	sts	0x01D1, r25	; 0x8001d1 <a4+0x1>
     a38:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <a4>
     a3c:	56 cf       	rjmp	.-340    	; 0x8ea <main+0x14>
   case 7: a5 = readAna(0);  break;
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <readAna>
     a44:	90 93 c6 01 	sts	0x01C6, r25	; 0x8001c6 <a5+0x1>
     a48:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <a5>
     a4c:	4e cf       	rjmp	.-356    	; 0x8ea <main+0x14>
   case 8: vcc = readVcc();  break;
     a4e:	0e 94 a0 01 	call	0x340	; 0x340 <readVcc>
     a52:	90 93 ad 01 	sts	0x01AD, r25	; 0x8001ad <vcc+0x1>
     a56:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <vcc>
     a5a:	47 cf       	rjmp	.-370    	; 0x8ea <main+0x14>
   case 10: temp = GetTemp();   break;
     a5c:	0e 94 d6 01 	call	0x3ac	; 0x3ac <GetTemp>
     a60:	90 93 b2 01 	sts	0x01B2, r25	; 0x8001b2 <temp+0x1>
     a64:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <temp>
     a68:	40 cf       	rjmp	.-384    	; 0x8ea <main+0x14>

 
   default: {a7 = readAna(10);  //read A7 more frequently 
     a6a:	8a e0       	ldi	r24, 0x0A	; 10
     a6c:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <readAna>
     a70:	9c 01       	movw	r18, r24
     a72:	90 93 c0 01 	sts	0x01C0, r25	; 0x8001c0 <a7+0x1>
     a76:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <a7>
           if (a7 > a7max) a7max = a7;
     a7a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <a7max>
     a7e:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <a7max+0x1>
     a82:	82 17       	cp	r24, r18
     a84:	93 07       	cpc	r25, r19
     a86:	20 f4       	brcc	.+8      	; 0xa90 <main+0x1ba>
     a88:	30 93 c4 01 	sts	0x01C4, r19	; 0x8001c4 <a7max+0x1>
     a8c:	20 93 c3 01 	sts	0x01C3, r18	; 0x8001c3 <a7max>
           if (a7 < a7min) a7min = a7;
     a90:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <a7min>
     a94:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <a7min+0x1>
     a98:	28 17       	cp	r18, r24
     a9a:	39 07       	cpc	r19, r25
     a9c:	20 f4       	brcc	.+8      	; 0xaa6 <main+0x1d0>
     a9e:	30 93 c8 01 	sts	0x01C8, r19	; 0x8001c8 <a7min+0x1>
     aa2:	20 93 c7 01 	sts	0x01C7, r18	; 0x8001c7 <a7min>
           a7count++;
     aa6:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <a7count>
     aaa:	8f 5f       	subi	r24, 0xFF	; 255
     aac:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <a7count>
           if (a7count > 60) {a7avg = (a7max - ((a7max +  a7min)/ 2)) * 0.707 ; a7min = 1024; a7max = 0; a7count = 0;} 
     ab0:	8d 33       	cpi	r24, 0x3D	; 61
     ab2:	08 f4       	brcc	.+2      	; 0xab6 <main+0x1e0>
     ab4:	1a cf       	rjmp	.-460    	; 0x8ea <main+0x14>
     ab6:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <a7max>
     aba:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <a7max+0x1>
     abe:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <a7min>
     ac2:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <a7min+0x1>
     ac6:	82 0f       	add	r24, r18
     ac8:	93 1f       	adc	r25, r19
     aca:	96 95       	lsr	r25
     acc:	87 95       	ror	r24
     ace:	28 1b       	sub	r18, r24
     ad0:	39 0b       	sbc	r19, r25
     ad2:	c9 01       	movw	r24, r18
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	a0 e0       	ldi	r26, 0x00	; 0
     ad8:	89 83       	std	Y+1, r24	; 0x01
     ada:	9a 83       	std	Y+2, r25	; 0x02
     adc:	ab 83       	std	Y+3, r26	; 0x03
     ade:	bc 83       	std	Y+4, r27	; 0x04
     ae0:	b9 01       	movw	r22, r18
     ae2:	cd 01       	movw	r24, r26
     ae4:	0e 94 cc 05 	call	0xb98	; 0xb98 <__floatunsisf>
     ae8:	24 ef       	ldi	r18, 0xF4	; 244
     aea:	3d ef       	ldi	r19, 0xFD	; 253
     aec:	44 e3       	ldi	r20, 0x34	; 52
     aee:	5f e3       	ldi	r21, 0x3F	; 63
     af0:	69 83       	std	Y+1, r22	; 0x01
     af2:	7a 83       	std	Y+2, r23	; 0x02
     af4:	8b 83       	std	Y+3, r24	; 0x03
     af6:	9c 83       	std	Y+4, r25	; 0x04
     af8:	69 81       	ldd	r22, Y+1	; 0x01
     afa:	7a 81       	ldd	r23, Y+2	; 0x02
     afc:	8b 81       	ldd	r24, Y+3	; 0x03
     afe:	9c 81       	ldd	r25, Y+4	; 0x04
     b00:	0e 94 32 06 	call	0xc64	; 0xc64 <__mulsf3>
     b04:	69 83       	std	Y+1, r22	; 0x01
     b06:	7a 83       	std	Y+2, r23	; 0x02
     b08:	8b 83       	std	Y+3, r24	; 0x03
     b0a:	9c 83       	std	Y+4, r25	; 0x04
     b0c:	69 81       	ldd	r22, Y+1	; 0x01
     b0e:	7a 81       	ldd	r23, Y+2	; 0x02
     b10:	8b 81       	ldd	r24, Y+3	; 0x03
     b12:	9c 81       	ldd	r25, Y+4	; 0x04
     b14:	0e 94 9d 05 	call	0xb3a	; 0xb3a <__fixunssfsi>
     b18:	70 93 c2 01 	sts	0x01C2, r23	; 0x8001c2 <a7avg+0x1>
     b1c:	60 93 c1 01 	sts	0x01C1, r22	; 0x8001c1 <a7avg>
     b20:	a0 e0       	ldi	r26, 0x00	; 0
     b22:	b4 e0       	ldi	r27, 0x04	; 4
     b24:	b0 93 c8 01 	sts	0x01C8, r27	; 0x8001c8 <a7min+0x1>
     b28:	a0 93 c7 01 	sts	0x01C7, r26	; 0x8001c7 <a7min>
     b2c:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <a7max+0x1>
     b30:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <a7max>
     b34:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <a7count>
     b38:	d8 ce       	rjmp	.-592    	; 0x8ea <main+0x14>

00000b3a <__fixunssfsi>:
     b3a:	0e 94 11 06 	call	0xc22	; 0xc22 <__fp_splitA>
     b3e:	88 f0       	brcs	.+34     	; 0xb62 <__fixunssfsi+0x28>
     b40:	9f 57       	subi	r25, 0x7F	; 127
     b42:	98 f0       	brcs	.+38     	; 0xb6a <__fixunssfsi+0x30>
     b44:	b9 2f       	mov	r27, r25
     b46:	99 27       	eor	r25, r25
     b48:	b7 51       	subi	r27, 0x17	; 23
     b4a:	b0 f0       	brcs	.+44     	; 0xb78 <__fixunssfsi+0x3e>
     b4c:	e1 f0       	breq	.+56     	; 0xb86 <__fixunssfsi+0x4c>
     b4e:	66 0f       	add	r22, r22
     b50:	77 1f       	adc	r23, r23
     b52:	88 1f       	adc	r24, r24
     b54:	99 1f       	adc	r25, r25
     b56:	1a f0       	brmi	.+6      	; 0xb5e <__fixunssfsi+0x24>
     b58:	ba 95       	dec	r27
     b5a:	c9 f7       	brne	.-14     	; 0xb4e <__fixunssfsi+0x14>
     b5c:	14 c0       	rjmp	.+40     	; 0xb86 <__fixunssfsi+0x4c>
     b5e:	b1 30       	cpi	r27, 0x01	; 1
     b60:	91 f0       	breq	.+36     	; 0xb86 <__fixunssfsi+0x4c>
     b62:	0e 94 2b 06 	call	0xc56	; 0xc56 <__fp_zero>
     b66:	b1 e0       	ldi	r27, 0x01	; 1
     b68:	08 95       	ret
     b6a:	0c 94 2b 06 	jmp	0xc56	; 0xc56 <__fp_zero>
     b6e:	67 2f       	mov	r22, r23
     b70:	78 2f       	mov	r23, r24
     b72:	88 27       	eor	r24, r24
     b74:	b8 5f       	subi	r27, 0xF8	; 248
     b76:	39 f0       	breq	.+14     	; 0xb86 <__fixunssfsi+0x4c>
     b78:	b9 3f       	cpi	r27, 0xF9	; 249
     b7a:	cc f3       	brlt	.-14     	; 0xb6e <__fixunssfsi+0x34>
     b7c:	86 95       	lsr	r24
     b7e:	77 95       	ror	r23
     b80:	67 95       	ror	r22
     b82:	b3 95       	inc	r27
     b84:	d9 f7       	brne	.-10     	; 0xb7c <__fixunssfsi+0x42>
     b86:	3e f4       	brtc	.+14     	; 0xb96 <__fixunssfsi+0x5c>
     b88:	90 95       	com	r25
     b8a:	80 95       	com	r24
     b8c:	70 95       	com	r23
     b8e:	61 95       	neg	r22
     b90:	7f 4f       	sbci	r23, 0xFF	; 255
     b92:	8f 4f       	sbci	r24, 0xFF	; 255
     b94:	9f 4f       	sbci	r25, 0xFF	; 255
     b96:	08 95       	ret

00000b98 <__floatunsisf>:
     b98:	e8 94       	clt
     b9a:	09 c0       	rjmp	.+18     	; 0xbae <__floatsisf+0x12>

00000b9c <__floatsisf>:
     b9c:	97 fb       	bst	r25, 7
     b9e:	3e f4       	brtc	.+14     	; 0xbae <__floatsisf+0x12>
     ba0:	90 95       	com	r25
     ba2:	80 95       	com	r24
     ba4:	70 95       	com	r23
     ba6:	61 95       	neg	r22
     ba8:	7f 4f       	sbci	r23, 0xFF	; 255
     baa:	8f 4f       	sbci	r24, 0xFF	; 255
     bac:	9f 4f       	sbci	r25, 0xFF	; 255
     bae:	99 23       	and	r25, r25
     bb0:	a9 f0       	breq	.+42     	; 0xbdc <__floatsisf+0x40>
     bb2:	f9 2f       	mov	r31, r25
     bb4:	96 e9       	ldi	r25, 0x96	; 150
     bb6:	bb 27       	eor	r27, r27
     bb8:	93 95       	inc	r25
     bba:	f6 95       	lsr	r31
     bbc:	87 95       	ror	r24
     bbe:	77 95       	ror	r23
     bc0:	67 95       	ror	r22
     bc2:	b7 95       	ror	r27
     bc4:	f1 11       	cpse	r31, r1
     bc6:	f8 cf       	rjmp	.-16     	; 0xbb8 <__floatsisf+0x1c>
     bc8:	fa f4       	brpl	.+62     	; 0xc08 <__floatsisf+0x6c>
     bca:	bb 0f       	add	r27, r27
     bcc:	11 f4       	brne	.+4      	; 0xbd2 <__floatsisf+0x36>
     bce:	60 ff       	sbrs	r22, 0
     bd0:	1b c0       	rjmp	.+54     	; 0xc08 <__floatsisf+0x6c>
     bd2:	6f 5f       	subi	r22, 0xFF	; 255
     bd4:	7f 4f       	sbci	r23, 0xFF	; 255
     bd6:	8f 4f       	sbci	r24, 0xFF	; 255
     bd8:	9f 4f       	sbci	r25, 0xFF	; 255
     bda:	16 c0       	rjmp	.+44     	; 0xc08 <__floatsisf+0x6c>
     bdc:	88 23       	and	r24, r24
     bde:	11 f0       	breq	.+4      	; 0xbe4 <__floatsisf+0x48>
     be0:	96 e9       	ldi	r25, 0x96	; 150
     be2:	11 c0       	rjmp	.+34     	; 0xc06 <__floatsisf+0x6a>
     be4:	77 23       	and	r23, r23
     be6:	21 f0       	breq	.+8      	; 0xbf0 <__floatsisf+0x54>
     be8:	9e e8       	ldi	r25, 0x8E	; 142
     bea:	87 2f       	mov	r24, r23
     bec:	76 2f       	mov	r23, r22
     bee:	05 c0       	rjmp	.+10     	; 0xbfa <__floatsisf+0x5e>
     bf0:	66 23       	and	r22, r22
     bf2:	71 f0       	breq	.+28     	; 0xc10 <__floatsisf+0x74>
     bf4:	96 e8       	ldi	r25, 0x86	; 134
     bf6:	86 2f       	mov	r24, r22
     bf8:	70 e0       	ldi	r23, 0x00	; 0
     bfa:	60 e0       	ldi	r22, 0x00	; 0
     bfc:	2a f0       	brmi	.+10     	; 0xc08 <__floatsisf+0x6c>
     bfe:	9a 95       	dec	r25
     c00:	66 0f       	add	r22, r22
     c02:	77 1f       	adc	r23, r23
     c04:	88 1f       	adc	r24, r24
     c06:	da f7       	brpl	.-10     	; 0xbfe <__floatsisf+0x62>
     c08:	88 0f       	add	r24, r24
     c0a:	96 95       	lsr	r25
     c0c:	87 95       	ror	r24
     c0e:	97 f9       	bld	r25, 7
     c10:	08 95       	ret

00000c12 <__fp_split3>:
     c12:	57 fd       	sbrc	r21, 7
     c14:	90 58       	subi	r25, 0x80	; 128
     c16:	44 0f       	add	r20, r20
     c18:	55 1f       	adc	r21, r21
     c1a:	59 f0       	breq	.+22     	; 0xc32 <__fp_splitA+0x10>
     c1c:	5f 3f       	cpi	r21, 0xFF	; 255
     c1e:	71 f0       	breq	.+28     	; 0xc3c <__fp_splitA+0x1a>
     c20:	47 95       	ror	r20

00000c22 <__fp_splitA>:
     c22:	88 0f       	add	r24, r24
     c24:	97 fb       	bst	r25, 7
     c26:	99 1f       	adc	r25, r25
     c28:	61 f0       	breq	.+24     	; 0xc42 <__fp_splitA+0x20>
     c2a:	9f 3f       	cpi	r25, 0xFF	; 255
     c2c:	79 f0       	breq	.+30     	; 0xc4c <__fp_splitA+0x2a>
     c2e:	87 95       	ror	r24
     c30:	08 95       	ret
     c32:	12 16       	cp	r1, r18
     c34:	13 06       	cpc	r1, r19
     c36:	14 06       	cpc	r1, r20
     c38:	55 1f       	adc	r21, r21
     c3a:	f2 cf       	rjmp	.-28     	; 0xc20 <__fp_split3+0xe>
     c3c:	46 95       	lsr	r20
     c3e:	f1 df       	rcall	.-30     	; 0xc22 <__fp_splitA>
     c40:	08 c0       	rjmp	.+16     	; 0xc52 <__fp_splitA+0x30>
     c42:	16 16       	cp	r1, r22
     c44:	17 06       	cpc	r1, r23
     c46:	18 06       	cpc	r1, r24
     c48:	99 1f       	adc	r25, r25
     c4a:	f1 cf       	rjmp	.-30     	; 0xc2e <__fp_splitA+0xc>
     c4c:	86 95       	lsr	r24
     c4e:	71 05       	cpc	r23, r1
     c50:	61 05       	cpc	r22, r1
     c52:	08 94       	sec
     c54:	08 95       	ret

00000c56 <__fp_zero>:
     c56:	e8 94       	clt

00000c58 <__fp_szero>:
     c58:	bb 27       	eor	r27, r27
     c5a:	66 27       	eor	r22, r22
     c5c:	77 27       	eor	r23, r23
     c5e:	cb 01       	movw	r24, r22
     c60:	97 f9       	bld	r25, 7
     c62:	08 95       	ret

00000c64 <__mulsf3>:
     c64:	0e 94 45 06 	call	0xc8a	; 0xc8a <__mulsf3x>
     c68:	0c 94 b6 06 	jmp	0xd6c	; 0xd6c <__fp_round>
     c6c:	0e 94 a8 06 	call	0xd50	; 0xd50 <__fp_pscA>
     c70:	38 f0       	brcs	.+14     	; 0xc80 <__mulsf3+0x1c>
     c72:	0e 94 af 06 	call	0xd5e	; 0xd5e <__fp_pscB>
     c76:	20 f0       	brcs	.+8      	; 0xc80 <__mulsf3+0x1c>
     c78:	95 23       	and	r25, r21
     c7a:	11 f0       	breq	.+4      	; 0xc80 <__mulsf3+0x1c>
     c7c:	0c 94 9f 06 	jmp	0xd3e	; 0xd3e <__fp_inf>
     c80:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <__fp_nan>
     c84:	11 24       	eor	r1, r1
     c86:	0c 94 2c 06 	jmp	0xc58	; 0xc58 <__fp_szero>

00000c8a <__mulsf3x>:
     c8a:	0e 94 09 06 	call	0xc12	; 0xc12 <__fp_split3>
     c8e:	70 f3       	brcs	.-36     	; 0xc6c <__mulsf3+0x8>

00000c90 <__mulsf3_pse>:
     c90:	95 9f       	mul	r25, r21
     c92:	c1 f3       	breq	.-16     	; 0xc84 <__mulsf3+0x20>
     c94:	95 0f       	add	r25, r21
     c96:	50 e0       	ldi	r21, 0x00	; 0
     c98:	55 1f       	adc	r21, r21
     c9a:	62 9f       	mul	r22, r18
     c9c:	f0 01       	movw	r30, r0
     c9e:	72 9f       	mul	r23, r18
     ca0:	bb 27       	eor	r27, r27
     ca2:	f0 0d       	add	r31, r0
     ca4:	b1 1d       	adc	r27, r1
     ca6:	63 9f       	mul	r22, r19
     ca8:	aa 27       	eor	r26, r26
     caa:	f0 0d       	add	r31, r0
     cac:	b1 1d       	adc	r27, r1
     cae:	aa 1f       	adc	r26, r26
     cb0:	64 9f       	mul	r22, r20
     cb2:	66 27       	eor	r22, r22
     cb4:	b0 0d       	add	r27, r0
     cb6:	a1 1d       	adc	r26, r1
     cb8:	66 1f       	adc	r22, r22
     cba:	82 9f       	mul	r24, r18
     cbc:	22 27       	eor	r18, r18
     cbe:	b0 0d       	add	r27, r0
     cc0:	a1 1d       	adc	r26, r1
     cc2:	62 1f       	adc	r22, r18
     cc4:	73 9f       	mul	r23, r19
     cc6:	b0 0d       	add	r27, r0
     cc8:	a1 1d       	adc	r26, r1
     cca:	62 1f       	adc	r22, r18
     ccc:	83 9f       	mul	r24, r19
     cce:	a0 0d       	add	r26, r0
     cd0:	61 1d       	adc	r22, r1
     cd2:	22 1f       	adc	r18, r18
     cd4:	74 9f       	mul	r23, r20
     cd6:	33 27       	eor	r19, r19
     cd8:	a0 0d       	add	r26, r0
     cda:	61 1d       	adc	r22, r1
     cdc:	23 1f       	adc	r18, r19
     cde:	84 9f       	mul	r24, r20
     ce0:	60 0d       	add	r22, r0
     ce2:	21 1d       	adc	r18, r1
     ce4:	82 2f       	mov	r24, r18
     ce6:	76 2f       	mov	r23, r22
     ce8:	6a 2f       	mov	r22, r26
     cea:	11 24       	eor	r1, r1
     cec:	9f 57       	subi	r25, 0x7F	; 127
     cee:	50 40       	sbci	r21, 0x00	; 0
     cf0:	9a f0       	brmi	.+38     	; 0xd18 <__mulsf3_pse+0x88>
     cf2:	f1 f0       	breq	.+60     	; 0xd30 <__mulsf3_pse+0xa0>
     cf4:	88 23       	and	r24, r24
     cf6:	4a f0       	brmi	.+18     	; 0xd0a <__mulsf3_pse+0x7a>
     cf8:	ee 0f       	add	r30, r30
     cfa:	ff 1f       	adc	r31, r31
     cfc:	bb 1f       	adc	r27, r27
     cfe:	66 1f       	adc	r22, r22
     d00:	77 1f       	adc	r23, r23
     d02:	88 1f       	adc	r24, r24
     d04:	91 50       	subi	r25, 0x01	; 1
     d06:	50 40       	sbci	r21, 0x00	; 0
     d08:	a9 f7       	brne	.-22     	; 0xcf4 <__mulsf3_pse+0x64>
     d0a:	9e 3f       	cpi	r25, 0xFE	; 254
     d0c:	51 05       	cpc	r21, r1
     d0e:	80 f0       	brcs	.+32     	; 0xd30 <__mulsf3_pse+0xa0>
     d10:	0c 94 9f 06 	jmp	0xd3e	; 0xd3e <__fp_inf>
     d14:	0c 94 2c 06 	jmp	0xc58	; 0xc58 <__fp_szero>
     d18:	5f 3f       	cpi	r21, 0xFF	; 255
     d1a:	e4 f3       	brlt	.-8      	; 0xd14 <__mulsf3_pse+0x84>
     d1c:	98 3e       	cpi	r25, 0xE8	; 232
     d1e:	d4 f3       	brlt	.-12     	; 0xd14 <__mulsf3_pse+0x84>
     d20:	86 95       	lsr	r24
     d22:	77 95       	ror	r23
     d24:	67 95       	ror	r22
     d26:	b7 95       	ror	r27
     d28:	f7 95       	ror	r31
     d2a:	e7 95       	ror	r30
     d2c:	9f 5f       	subi	r25, 0xFF	; 255
     d2e:	c1 f7       	brne	.-16     	; 0xd20 <__mulsf3_pse+0x90>
     d30:	fe 2b       	or	r31, r30
     d32:	88 0f       	add	r24, r24
     d34:	91 1d       	adc	r25, r1
     d36:	96 95       	lsr	r25
     d38:	87 95       	ror	r24
     d3a:	97 f9       	bld	r25, 7
     d3c:	08 95       	ret

00000d3e <__fp_inf>:
     d3e:	97 f9       	bld	r25, 7
     d40:	9f 67       	ori	r25, 0x7F	; 127
     d42:	80 e8       	ldi	r24, 0x80	; 128
     d44:	70 e0       	ldi	r23, 0x00	; 0
     d46:	60 e0       	ldi	r22, 0x00	; 0
     d48:	08 95       	ret

00000d4a <__fp_nan>:
     d4a:	9f ef       	ldi	r25, 0xFF	; 255
     d4c:	80 ec       	ldi	r24, 0xC0	; 192
     d4e:	08 95       	ret

00000d50 <__fp_pscA>:
     d50:	00 24       	eor	r0, r0
     d52:	0a 94       	dec	r0
     d54:	16 16       	cp	r1, r22
     d56:	17 06       	cpc	r1, r23
     d58:	18 06       	cpc	r1, r24
     d5a:	09 06       	cpc	r0, r25
     d5c:	08 95       	ret

00000d5e <__fp_pscB>:
     d5e:	00 24       	eor	r0, r0
     d60:	0a 94       	dec	r0
     d62:	12 16       	cp	r1, r18
     d64:	13 06       	cpc	r1, r19
     d66:	14 06       	cpc	r1, r20
     d68:	05 06       	cpc	r0, r21
     d6a:	08 95       	ret

00000d6c <__fp_round>:
     d6c:	09 2e       	mov	r0, r25
     d6e:	03 94       	inc	r0
     d70:	00 0c       	add	r0, r0
     d72:	11 f4       	brne	.+4      	; 0xd78 <__fp_round+0xc>
     d74:	88 23       	and	r24, r24
     d76:	52 f0       	brmi	.+20     	; 0xd8c <__fp_round+0x20>
     d78:	bb 0f       	add	r27, r27
     d7a:	40 f4       	brcc	.+16     	; 0xd8c <__fp_round+0x20>
     d7c:	bf 2b       	or	r27, r31
     d7e:	11 f4       	brne	.+4      	; 0xd84 <__fp_round+0x18>
     d80:	60 ff       	sbrs	r22, 0
     d82:	04 c0       	rjmp	.+8      	; 0xd8c <__fp_round+0x20>
     d84:	6f 5f       	subi	r22, 0xFF	; 255
     d86:	7f 4f       	sbci	r23, 0xFF	; 255
     d88:	8f 4f       	sbci	r24, 0xFF	; 255
     d8a:	9f 4f       	sbci	r25, 0xFF	; 255
     d8c:	08 95       	ret

00000d8e <__divmodsi4>:
     d8e:	05 2e       	mov	r0, r21
     d90:	97 fb       	bst	r25, 7
     d92:	1e f4       	brtc	.+6      	; 0xd9a <__divmodsi4+0xc>
     d94:	00 94       	com	r0
     d96:	0e 94 de 06 	call	0xdbc	; 0xdbc <__negsi2>
     d9a:	57 fd       	sbrc	r21, 7
     d9c:	07 d0       	rcall	.+14     	; 0xdac <__divmodsi4_neg2>
     d9e:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__udivmodsi4>
     da2:	07 fc       	sbrc	r0, 7
     da4:	03 d0       	rcall	.+6      	; 0xdac <__divmodsi4_neg2>
     da6:	4e f4       	brtc	.+18     	; 0xdba <__divmodsi4_exit>
     da8:	0c 94 de 06 	jmp	0xdbc	; 0xdbc <__negsi2>

00000dac <__divmodsi4_neg2>:
     dac:	50 95       	com	r21
     dae:	40 95       	com	r20
     db0:	30 95       	com	r19
     db2:	21 95       	neg	r18
     db4:	3f 4f       	sbci	r19, 0xFF	; 255
     db6:	4f 4f       	sbci	r20, 0xFF	; 255
     db8:	5f 4f       	sbci	r21, 0xFF	; 255

00000dba <__divmodsi4_exit>:
     dba:	08 95       	ret

00000dbc <__negsi2>:
     dbc:	90 95       	com	r25
     dbe:	80 95       	com	r24
     dc0:	70 95       	com	r23
     dc2:	61 95       	neg	r22
     dc4:	7f 4f       	sbci	r23, 0xFF	; 255
     dc6:	8f 4f       	sbci	r24, 0xFF	; 255
     dc8:	9f 4f       	sbci	r25, 0xFF	; 255
     dca:	08 95       	ret

00000dcc <__tablejump2__>:
     dcc:	ee 0f       	add	r30, r30
     dce:	ff 1f       	adc	r31, r31
     dd0:	05 90       	lpm	r0, Z+
     dd2:	f4 91       	lpm	r31, Z
     dd4:	e0 2d       	mov	r30, r0
     dd6:	09 94       	ijmp

00000dd8 <__udivmodsi4>:
     dd8:	a1 e2       	ldi	r26, 0x21	; 33
     dda:	1a 2e       	mov	r1, r26
     ddc:	aa 1b       	sub	r26, r26
     dde:	bb 1b       	sub	r27, r27
     de0:	fd 01       	movw	r30, r26
     de2:	0d c0       	rjmp	.+26     	; 0xdfe <__udivmodsi4_ep>

00000de4 <__udivmodsi4_loop>:
     de4:	aa 1f       	adc	r26, r26
     de6:	bb 1f       	adc	r27, r27
     de8:	ee 1f       	adc	r30, r30
     dea:	ff 1f       	adc	r31, r31
     dec:	a2 17       	cp	r26, r18
     dee:	b3 07       	cpc	r27, r19
     df0:	e4 07       	cpc	r30, r20
     df2:	f5 07       	cpc	r31, r21
     df4:	20 f0       	brcs	.+8      	; 0xdfe <__udivmodsi4_ep>
     df6:	a2 1b       	sub	r26, r18
     df8:	b3 0b       	sbc	r27, r19
     dfa:	e4 0b       	sbc	r30, r20
     dfc:	f5 0b       	sbc	r31, r21

00000dfe <__udivmodsi4_ep>:
     dfe:	66 1f       	adc	r22, r22
     e00:	77 1f       	adc	r23, r23
     e02:	88 1f       	adc	r24, r24
     e04:	99 1f       	adc	r25, r25
     e06:	1a 94       	dec	r1
     e08:	69 f7       	brne	.-38     	; 0xde4 <__udivmodsi4_loop>
     e0a:	60 95       	com	r22
     e0c:	70 95       	com	r23
     e0e:	80 95       	com	r24
     e10:	90 95       	com	r25
     e12:	9b 01       	movw	r18, r22
     e14:	ac 01       	movw	r20, r24
     e16:	bd 01       	movw	r22, r26
     e18:	cf 01       	movw	r24, r30
     e1a:	08 95       	ret

00000e1c <malloc>:
     e1c:	0f 93       	push	r16
     e1e:	1f 93       	push	r17
     e20:	cf 93       	push	r28
     e22:	df 93       	push	r29
     e24:	82 30       	cpi	r24, 0x02	; 2
     e26:	91 05       	cpc	r25, r1
     e28:	10 f4       	brcc	.+4      	; 0xe2e <malloc+0x12>
     e2a:	82 e0       	ldi	r24, 0x02	; 2
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	e0 91 d4 01 	lds	r30, 0x01D4	; 0x8001d4 <__flp>
     e32:	f0 91 d5 01 	lds	r31, 0x01D5	; 0x8001d5 <__flp+0x1>
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	20 e0       	ldi	r18, 0x00	; 0
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	a0 e0       	ldi	r26, 0x00	; 0
     e3e:	30 97       	sbiw	r30, 0x00	; 0
     e40:	99 f4       	brne	.+38     	; 0xe68 <malloc+0x4c>
     e42:	21 15       	cp	r18, r1
     e44:	31 05       	cpc	r19, r1
     e46:	09 f4       	brne	.+2      	; 0xe4a <malloc+0x2e>
     e48:	47 c0       	rjmp	.+142    	; 0xed8 <malloc+0xbc>
     e4a:	28 1b       	sub	r18, r24
     e4c:	39 0b       	sbc	r19, r25
     e4e:	24 30       	cpi	r18, 0x04	; 4
     e50:	31 05       	cpc	r19, r1
     e52:	c0 f5       	brcc	.+112    	; 0xec4 <malloc+0xa8>
     e54:	8a 81       	ldd	r24, Y+2	; 0x02
     e56:	9b 81       	ldd	r25, Y+3	; 0x03
     e58:	61 15       	cp	r22, r1
     e5a:	71 05       	cpc	r23, r1
     e5c:	71 f1       	breq	.+92     	; 0xeba <malloc+0x9e>
     e5e:	fb 01       	movw	r30, r22
     e60:	93 83       	std	Z+3, r25	; 0x03
     e62:	82 83       	std	Z+2, r24	; 0x02
     e64:	fe 01       	movw	r30, r28
     e66:	11 c0       	rjmp	.+34     	; 0xe8a <malloc+0x6e>
     e68:	40 81       	ld	r20, Z
     e6a:	51 81       	ldd	r21, Z+1	; 0x01
     e6c:	02 81       	ldd	r16, Z+2	; 0x02
     e6e:	13 81       	ldd	r17, Z+3	; 0x03
     e70:	48 17       	cp	r20, r24
     e72:	59 07       	cpc	r21, r25
     e74:	f8 f0       	brcs	.+62     	; 0xeb4 <malloc+0x98>
     e76:	48 17       	cp	r20, r24
     e78:	59 07       	cpc	r21, r25
     e7a:	99 f4       	brne	.+38     	; 0xea2 <malloc+0x86>
     e7c:	10 97       	sbiw	r26, 0x00	; 0
     e7e:	61 f0       	breq	.+24     	; 0xe98 <malloc+0x7c>
     e80:	12 96       	adiw	r26, 0x02	; 2
     e82:	0c 93       	st	X, r16
     e84:	12 97       	sbiw	r26, 0x02	; 2
     e86:	13 96       	adiw	r26, 0x03	; 3
     e88:	1c 93       	st	X, r17
     e8a:	32 96       	adiw	r30, 0x02	; 2
     e8c:	cf 01       	movw	r24, r30
     e8e:	df 91       	pop	r29
     e90:	cf 91       	pop	r28
     e92:	1f 91       	pop	r17
     e94:	0f 91       	pop	r16
     e96:	08 95       	ret
     e98:	00 93 d4 01 	sts	0x01D4, r16	; 0x8001d4 <__flp>
     e9c:	10 93 d5 01 	sts	0x01D5, r17	; 0x8001d5 <__flp+0x1>
     ea0:	f4 cf       	rjmp	.-24     	; 0xe8a <malloc+0x6e>
     ea2:	21 15       	cp	r18, r1
     ea4:	31 05       	cpc	r19, r1
     ea6:	19 f0       	breq	.+6      	; 0xeae <malloc+0x92>
     ea8:	42 17       	cp	r20, r18
     eaa:	53 07       	cpc	r21, r19
     eac:	18 f4       	brcc	.+6      	; 0xeb4 <malloc+0x98>
     eae:	9a 01       	movw	r18, r20
     eb0:	bd 01       	movw	r22, r26
     eb2:	ef 01       	movw	r28, r30
     eb4:	df 01       	movw	r26, r30
     eb6:	f8 01       	movw	r30, r16
     eb8:	c2 cf       	rjmp	.-124    	; 0xe3e <malloc+0x22>
     eba:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <__flp+0x1>
     ebe:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <__flp>
     ec2:	d0 cf       	rjmp	.-96     	; 0xe64 <malloc+0x48>
     ec4:	fe 01       	movw	r30, r28
     ec6:	e2 0f       	add	r30, r18
     ec8:	f3 1f       	adc	r31, r19
     eca:	81 93       	st	Z+, r24
     ecc:	91 93       	st	Z+, r25
     ece:	22 50       	subi	r18, 0x02	; 2
     ed0:	31 09       	sbc	r19, r1
     ed2:	39 83       	std	Y+1, r19	; 0x01
     ed4:	28 83       	st	Y, r18
     ed6:	da cf       	rjmp	.-76     	; 0xe8c <malloc+0x70>
     ed8:	20 91 d2 01 	lds	r18, 0x01D2	; 0x8001d2 <__brkval>
     edc:	30 91 d3 01 	lds	r19, 0x01D3	; 0x8001d3 <__brkval+0x1>
     ee0:	23 2b       	or	r18, r19
     ee2:	41 f4       	brne	.+16     	; 0xef4 <malloc+0xd8>
     ee4:	20 91 a4 01 	lds	r18, 0x01A4	; 0x8001a4 <__malloc_heap_start>
     ee8:	30 91 a5 01 	lds	r19, 0x01A5	; 0x8001a5 <__malloc_heap_start+0x1>
     eec:	30 93 d3 01 	sts	0x01D3, r19	; 0x8001d3 <__brkval+0x1>
     ef0:	20 93 d2 01 	sts	0x01D2, r18	; 0x8001d2 <__brkval>
     ef4:	20 91 a2 01 	lds	r18, 0x01A2	; 0x8001a2 <__malloc_heap_end>
     ef8:	30 91 a3 01 	lds	r19, 0x01A3	; 0x8001a3 <__malloc_heap_end+0x1>
     efc:	21 15       	cp	r18, r1
     efe:	31 05       	cpc	r19, r1
     f00:	41 f4       	brne	.+16     	; 0xf12 <malloc+0xf6>
     f02:	2d b7       	in	r18, 0x3d	; 61
     f04:	3e b7       	in	r19, 0x3e	; 62
     f06:	40 91 a6 01 	lds	r20, 0x01A6	; 0x8001a6 <__malloc_margin>
     f0a:	50 91 a7 01 	lds	r21, 0x01A7	; 0x8001a7 <__malloc_margin+0x1>
     f0e:	24 1b       	sub	r18, r20
     f10:	35 0b       	sbc	r19, r21
     f12:	e0 91 d2 01 	lds	r30, 0x01D2	; 0x8001d2 <__brkval>
     f16:	f0 91 d3 01 	lds	r31, 0x01D3	; 0x8001d3 <__brkval+0x1>
     f1a:	e2 17       	cp	r30, r18
     f1c:	f3 07       	cpc	r31, r19
     f1e:	a0 f4       	brcc	.+40     	; 0xf48 <malloc+0x12c>
     f20:	2e 1b       	sub	r18, r30
     f22:	3f 0b       	sbc	r19, r31
     f24:	28 17       	cp	r18, r24
     f26:	39 07       	cpc	r19, r25
     f28:	78 f0       	brcs	.+30     	; 0xf48 <malloc+0x12c>
     f2a:	ac 01       	movw	r20, r24
     f2c:	4e 5f       	subi	r20, 0xFE	; 254
     f2e:	5f 4f       	sbci	r21, 0xFF	; 255
     f30:	24 17       	cp	r18, r20
     f32:	35 07       	cpc	r19, r21
     f34:	48 f0       	brcs	.+18     	; 0xf48 <malloc+0x12c>
     f36:	4e 0f       	add	r20, r30
     f38:	5f 1f       	adc	r21, r31
     f3a:	50 93 d3 01 	sts	0x01D3, r21	; 0x8001d3 <__brkval+0x1>
     f3e:	40 93 d2 01 	sts	0x01D2, r20	; 0x8001d2 <__brkval>
     f42:	81 93       	st	Z+, r24
     f44:	91 93       	st	Z+, r25
     f46:	a2 cf       	rjmp	.-188    	; 0xe8c <malloc+0x70>
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	e0 e0       	ldi	r30, 0x00	; 0
     f4c:	9f cf       	rjmp	.-194    	; 0xe8c <malloc+0x70>

00000f4e <free>:
     f4e:	cf 93       	push	r28
     f50:	df 93       	push	r29
     f52:	00 97       	sbiw	r24, 0x00	; 0
     f54:	e9 f0       	breq	.+58     	; 0xf90 <free+0x42>
     f56:	fc 01       	movw	r30, r24
     f58:	32 97       	sbiw	r30, 0x02	; 2
     f5a:	13 82       	std	Z+3, r1	; 0x03
     f5c:	12 82       	std	Z+2, r1	; 0x02
     f5e:	c0 91 d4 01 	lds	r28, 0x01D4	; 0x8001d4 <__flp>
     f62:	d0 91 d5 01 	lds	r29, 0x01D5	; 0x8001d5 <__flp+0x1>
     f66:	de 01       	movw	r26, r28
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	20 e0       	ldi	r18, 0x00	; 0
     f6c:	20 97       	sbiw	r28, 0x00	; 0
     f6e:	a1 f4       	brne	.+40     	; 0xf98 <free+0x4a>
     f70:	20 81       	ld	r18, Z
     f72:	31 81       	ldd	r19, Z+1	; 0x01
     f74:	82 0f       	add	r24, r18
     f76:	93 1f       	adc	r25, r19
     f78:	20 91 d2 01 	lds	r18, 0x01D2	; 0x8001d2 <__brkval>
     f7c:	30 91 d3 01 	lds	r19, 0x01D3	; 0x8001d3 <__brkval+0x1>
     f80:	28 17       	cp	r18, r24
     f82:	39 07       	cpc	r19, r25
     f84:	09 f0       	breq	.+2      	; 0xf88 <free+0x3a>
     f86:	67 c0       	rjmp	.+206    	; 0x1056 <free+0x108>
     f88:	f0 93 d3 01 	sts	0x01D3, r31	; 0x8001d3 <__brkval+0x1>
     f8c:	e0 93 d2 01 	sts	0x01D2, r30	; 0x8001d2 <__brkval>
     f90:	df 91       	pop	r29
     f92:	cf 91       	pop	r28
     f94:	08 95       	ret
     f96:	da 01       	movw	r26, r20
     f98:	ae 17       	cp	r26, r30
     f9a:	bf 07       	cpc	r27, r31
     f9c:	08 f0       	brcs	.+2      	; 0xfa0 <free+0x52>
     f9e:	40 c0       	rjmp	.+128    	; 0x1020 <free+0xd2>
     fa0:	12 96       	adiw	r26, 0x02	; 2
     fa2:	4d 91       	ld	r20, X+
     fa4:	5c 91       	ld	r21, X
     fa6:	13 97       	sbiw	r26, 0x03	; 3
     fa8:	9d 01       	movw	r18, r26
     faa:	41 15       	cp	r20, r1
     fac:	51 05       	cpc	r21, r1
     fae:	99 f7       	brne	.-26     	; 0xf96 <free+0x48>
     fb0:	d9 01       	movw	r26, r18
     fb2:	13 96       	adiw	r26, 0x03	; 3
     fb4:	fc 93       	st	X, r31
     fb6:	ee 93       	st	-X, r30
     fb8:	12 97       	sbiw	r26, 0x02	; 2
     fba:	4d 91       	ld	r20, X+
     fbc:	5d 91       	ld	r21, X+
     fbe:	a4 0f       	add	r26, r20
     fc0:	b5 1f       	adc	r27, r21
     fc2:	ea 17       	cp	r30, r26
     fc4:	fb 07       	cpc	r31, r27
     fc6:	79 f4       	brne	.+30     	; 0xfe6 <free+0x98>
     fc8:	80 81       	ld	r24, Z
     fca:	91 81       	ldd	r25, Z+1	; 0x01
     fcc:	02 96       	adiw	r24, 0x02	; 2
     fce:	84 0f       	add	r24, r20
     fd0:	95 1f       	adc	r25, r21
     fd2:	d9 01       	movw	r26, r18
     fd4:	11 96       	adiw	r26, 0x01	; 1
     fd6:	9c 93       	st	X, r25
     fd8:	8e 93       	st	-X, r24
     fda:	82 81       	ldd	r24, Z+2	; 0x02
     fdc:	93 81       	ldd	r25, Z+3	; 0x03
     fde:	13 96       	adiw	r26, 0x03	; 3
     fe0:	9c 93       	st	X, r25
     fe2:	8e 93       	st	-X, r24
     fe4:	12 97       	sbiw	r26, 0x02	; 2
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	a0 e0       	ldi	r26, 0x00	; 0
     fea:	8a 81       	ldd	r24, Y+2	; 0x02
     fec:	9b 81       	ldd	r25, Y+3	; 0x03
     fee:	00 97       	sbiw	r24, 0x00	; 0
     ff0:	b9 f5       	brne	.+110    	; 0x1060 <free+0x112>
     ff2:	fe 01       	movw	r30, r28
     ff4:	81 91       	ld	r24, Z+
     ff6:	91 91       	ld	r25, Z+
     ff8:	e8 0f       	add	r30, r24
     ffa:	f9 1f       	adc	r31, r25
     ffc:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <__brkval>
    1000:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <__brkval+0x1>
    1004:	8e 17       	cp	r24, r30
    1006:	9f 07       	cpc	r25, r31
    1008:	19 f6       	brne	.-122    	; 0xf90 <free+0x42>
    100a:	10 97       	sbiw	r26, 0x00	; 0
    100c:	61 f5       	brne	.+88     	; 0x1066 <free+0x118>
    100e:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <__flp+0x1>
    1012:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <__flp>
    1016:	d0 93 d3 01 	sts	0x01D3, r29	; 0x8001d3 <__brkval+0x1>
    101a:	c0 93 d2 01 	sts	0x01D2, r28	; 0x8001d2 <__brkval>
    101e:	b8 cf       	rjmp	.-144    	; 0xf90 <free+0x42>
    1020:	b3 83       	std	Z+3, r27	; 0x03
    1022:	a2 83       	std	Z+2, r26	; 0x02
    1024:	40 81       	ld	r20, Z
    1026:	51 81       	ldd	r21, Z+1	; 0x01
    1028:	84 0f       	add	r24, r20
    102a:	95 1f       	adc	r25, r21
    102c:	a8 17       	cp	r26, r24
    102e:	b9 07       	cpc	r27, r25
    1030:	71 f4       	brne	.+28     	; 0x104e <free+0x100>
    1032:	4e 5f       	subi	r20, 0xFE	; 254
    1034:	5f 4f       	sbci	r21, 0xFF	; 255
    1036:	8d 91       	ld	r24, X+
    1038:	9c 91       	ld	r25, X
    103a:	11 97       	sbiw	r26, 0x01	; 1
    103c:	48 0f       	add	r20, r24
    103e:	59 1f       	adc	r21, r25
    1040:	51 83       	std	Z+1, r21	; 0x01
    1042:	40 83       	st	Z, r20
    1044:	12 96       	adiw	r26, 0x02	; 2
    1046:	8d 91       	ld	r24, X+
    1048:	9c 91       	ld	r25, X
    104a:	93 83       	std	Z+3, r25	; 0x03
    104c:	82 83       	std	Z+2, r24	; 0x02
    104e:	21 15       	cp	r18, r1
    1050:	31 05       	cpc	r19, r1
    1052:	09 f0       	breq	.+2      	; 0x1056 <free+0x108>
    1054:	ad cf       	rjmp	.-166    	; 0xfb0 <free+0x62>
    1056:	f0 93 d5 01 	sts	0x01D5, r31	; 0x8001d5 <__flp+0x1>
    105a:	e0 93 d4 01 	sts	0x01D4, r30	; 0x8001d4 <__flp>
    105e:	98 cf       	rjmp	.-208    	; 0xf90 <free+0x42>
    1060:	de 01       	movw	r26, r28
    1062:	ec 01       	movw	r28, r24
    1064:	c2 cf       	rjmp	.-124    	; 0xfea <free+0x9c>
    1066:	13 96       	adiw	r26, 0x03	; 3
    1068:	1c 92       	st	X, r1
    106a:	1e 92       	st	-X, r1
    106c:	12 97       	sbiw	r26, 0x02	; 2
    106e:	d3 cf       	rjmp	.-90     	; 0x1016 <free+0xc8>

00001070 <_exit>:
    1070:	f8 94       	cli

00001072 <__stop_program>:
    1072:	ff cf       	rjmp	.-2      	; 0x1072 <__stop_program>
    1074:	d3 03       	fmuls	r21, r19
    1076:	a5 03       	fmuls	r18, r21
    1078:	a5 03       	fmuls	r18, r21
    107a:	a5 03       	fmuls	r18, r21
    107c:	a5 03       	fmuls	r18, r21
    107e:	be 03       	fmulsu	r19, r22
    1080:	d8 03       	fmulsu	r21, r16
    1082:	de 03       	fmulsu	r21, r22
    1084:	e5 03       	fmuls	r22, r21
    1086:	ea 03       	fmulsu	r22, r18
    1088:	ef 03       	fmulsu	r22, r23
    108a:	02 04       	cpc	r0, r2
    108c:	07 04       	cpc	r0, r7
    108e:	b3 02       	muls	r27, r19
    1090:	cc 02       	muls	r28, r28
    1092:	d1 02       	muls	r29, r17
    1094:	d6 02       	muls	r29, r22
    1096:	db 02       	muls	r29, r27
    1098:	e0 02       	muls	r30, r16
    109a:	e5 02       	muls	r30, r21
    109c:	bb 02       	muls	r27, r27
    109e:	ea 02       	muls	r30, r26
    10a0:	ef 02       	muls	r30, r31
    10a2:	f4 02       	muls	r31, r20
    10a4:	f9 02       	muls	r31, r25
    10a6:	bb 02       	muls	r27, r27
    10a8:	bb 02       	muls	r27, r27
    10aa:	bb 02       	muls	r27, r27
    10ac:	bb 02       	muls	r27, r27
    10ae:	bb 02       	muls	r27, r27
    10b0:	bb 02       	muls	r27, r27
    10b2:	bb 02       	muls	r27, r27
    10b4:	bb 02       	muls	r27, r27
    10b6:	fc 02       	muls	r31, r28
    10b8:	ff 04       	cpc	r15, r15
    10ba:	07 05       	cpc	r16, r7
    10bc:	35 05       	cpc	r19, r5
    10be:	0f 05       	cpc	r16, r15
    10c0:	17 05       	cpc	r17, r7
    10c2:	35 05       	cpc	r19, r5
    10c4:	1f 05       	cpc	r17, r15
    10c6:	27 05       	cpc	r18, r7
    10c8:	35 05       	cpc	r19, r5
    10ca:	2e 05       	cpc	r18, r14
